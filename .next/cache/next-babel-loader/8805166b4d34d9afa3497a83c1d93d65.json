{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { queryDB, getUser, insertUser } from '../../db';\nimport uuid from 'uuidv4';\nimport { testEmail } from '../../Functions';\nexport default async function (req, res) {\n  let newUser,\n      {\n    name,\n    email,\n    content,\n    article_id,\n    parent,\n    post_date\n  } = req.body;\n\n  if (!testEmail(email)) {\n    res.json(1);\n    res.end();\n    return;\n  }\n\n  let hydratedComment = {\n    article_id,\n    content,\n    post_date,\n    parent,\n    replies: [],\n    id: uuid()\n  };\n\n  try {\n    let user = await getUser(email);\n\n    if (user) {\n      if (user.name !== name) {\n        res.json(2);\n        res.end();\n        return;\n      }\n\n      await queryDB('UPDATE users SET comments = array_append(comments, $1) WHERE email = $2', [hydratedComment, email]);\n    } else {\n      newUser = true;\n      await insertUser(name, email);\n    }\n\n    if (parent) {\n      let comments = await queryDB('SELECT comments FROM articles WHERE id = $1', [articleID]);\n\n      function editReplies(level) {\n        return level.map((comment, {\n          replies\n        }) => replies.find(({\n          id\n        }) => id === parent) ? _objectSpread(_objectSpread({}, comment), {}, {\n          replies: [...replies.filter(({\n            id\n          }) => id !== parent), hydratedComment]\n        }) : replies.length ? editReplies(level) : comment);\n      }\n\n      await queryDB('UPDATE articles SET comments = $1 WHERE id = $2', [editReplies(comments), articleID]);\n    } else await queryDB('UPDATE articles SET comments = array_append(comments, $1) WHERE id = $2', [_objectSpread({\n      name,\n      email\n    }, hydratedComment), articleID]);\n\n    if (newUser) {\n      res.json(3);\n      res.end();\n      return;\n    }\n\n    res.json(0);\n    res.end();\n  } catch (e) {\n    console.log(e);\n  } finally {\n    client.release();\n  }\n}","map":{"version":3,"sources":["C:/Users/nicho/Code/Portfolio/mock_nexus/pages/api/post-comment.js"],"names":["queryDB","getUser","insertUser","uuid","testEmail","req","res","newUser","name","email","content","article_id","parent","post_date","body","json","end","hydratedComment","replies","id","user","comments","articleID","editReplies","level","map","comment","find","filter","length","e","console","log","client","release"],"mappings":";;;;;;AAAA,SAASA,OAAT,EAAkBC,OAAlB,EAA2BC,UAA3B,QAA6C,UAA7C;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAEA,eAAe,gBAAeC,GAAf,EAAoBC,GAApB,EAAyB;AACpC,MAAIC,OAAJ;AAAA,MACI;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,OAAf;AAAwBC,IAAAA,UAAxB;AAAoCC,IAAAA,MAApC;AAA4CC,IAAAA;AAA5C,MAA0DR,GAAG,CAACS,IADlE;;AAEA,MAAI,CAACV,SAAS,CAACK,KAAD,CAAd,EAAuB;AAAEH,IAAAA,GAAG,CAACS,IAAJ,CAAS,CAAT;AAAaT,IAAAA,GAAG,CAACU,GAAJ;AAAW;AAAQ;;AACzD,MAAIC,eAAe,GAAG;AAAEN,IAAAA,UAAF;AAAcD,IAAAA,OAAd;AAAuBG,IAAAA,SAAvB;AAAkCD,IAAAA,MAAlC;AAA0CM,IAAAA,OAAO,EAAE,EAAnD;AAAuDC,IAAAA,EAAE,EAAEhB,IAAI;AAA/D,GAAtB;;AACA,MAAI;AACA,QAAIiB,IAAI,GAAG,MAAMnB,OAAO,CAACQ,KAAD,CAAxB;;AACA,QAAIW,IAAJ,EAAU;AACN,UAAIA,IAAI,CAACZ,IAAL,KAAcA,IAAlB,EAAwB;AAAEF,QAAAA,GAAG,CAACS,IAAJ,CAAS,CAAT;AAAaT,QAAAA,GAAG,CAACU,GAAJ;AAAW;AAAQ;;AAC1D,YAAMhB,OAAO,CAAC,yEAAD,EAA4E,CAACiB,eAAD,EAAkBR,KAAlB,CAA5E,CAAb;AACH,KAHD,MAGO;AACHF,MAAAA,OAAO,GAAG,IAAV;AACA,YAAML,UAAU,CAACM,IAAD,EAAOC,KAAP,CAAhB;AACH;;AACD,QAAIG,MAAJ,EAAY;AACR,UAAIS,QAAQ,GAAG,MAAMrB,OAAO,CAAC,6CAAD,EAAgD,CAACsB,SAAD,CAAhD,CAA5B;;AACA,eAASC,WAAT,CAAqBC,KAArB,EAA4B;AACxB,eAAOA,KAAK,CAACC,GAAN,CAAU,CAACC,OAAD,EAAU;AAACR,UAAAA;AAAD,SAAV,KACbA,OAAO,CAACS,IAAR,CAAa,CAAC;AAACR,UAAAA;AAAD,SAAD,KAAUA,EAAE,KAAKP,MAA9B,oCACYc,OADZ;AACqBR,UAAAA,OAAO,EAAE,CAAC,GAAGA,OAAO,CAACU,MAAR,CAAe,CAAC;AAACT,YAAAA;AAAD,WAAD,KAAUA,EAAE,KAAKP,MAAhC,CAAJ,EAA6CK,eAA7C;AAD9B,aAEMC,OAAO,CAACW,MAAR,GACIN,WAAW,CAACC,KAAD,CADf,GAEIE,OALP,CAAP;AAMH;;AACD,YAAM1B,OAAO,CAAC,iDAAD,EAAoD,CAACuB,WAAW,CAACF,QAAD,CAAZ,EAAwBC,SAAxB,CAApD,CAAb;AACH,KAXD,MAWO,MAAMtB,OAAO,CAAC,yEAAD,EAA4E;AAAEQ,MAAAA,IAAF;AAAQC,MAAAA;AAAR,OAAkBQ,eAAlB,GAAoCK,SAApC,CAA5E,CAAb;;AACP,QAAIf,OAAJ,EAAa;AAAED,MAAAA,GAAG,CAACS,IAAJ,CAAS,CAAT;AAAaT,MAAAA,GAAG,CAACU,GAAJ;AAAW;AAAQ;;AAC/CV,IAAAA,GAAG,CAACS,IAAJ,CAAS,CAAT;AACAT,IAAAA,GAAG,CAACU,GAAJ;AACH,GAxBD,CAwBE,OAAOc,CAAP,EAAU;AAAEC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AAAgB,GAxB9B,SAyBQ;AAAEG,IAAAA,MAAM,CAACC,OAAP;AAAkB;AAC/B","sourcesContent":["import { queryDB, getUser, insertUser } from '../../db';\r\nimport uuid from 'uuidv4';\r\nimport { testEmail } from '../../Functions';\r\n\r\nexport default async function(req, res) {\r\n    let newUser,\r\n        { name, email, content, article_id, parent, post_date } = req.body;\r\n    if (!testEmail(email)) { res.json(1); res.end(); return }\r\n    let hydratedComment = { article_id, content, post_date, parent, replies: [], id: uuid() };\r\n    try {\r\n        let user = await getUser(email);\r\n        if (user) {\r\n            if (user.name !== name) { res.json(2); res.end(); return }\r\n            await queryDB('UPDATE users SET comments = array_append(comments, $1) WHERE email = $2', [hydratedComment, email]);\r\n        } else {\r\n            newUser = true;\r\n            await insertUser(name, email);\r\n        }\r\n        if (parent) {\r\n            let comments = await queryDB('SELECT comments FROM articles WHERE id = $1', [articleID]);\r\n            function editReplies(level) {\r\n                return level.map((comment, {replies}) =>\r\n                    replies.find(({id}) => id === parent)\r\n                        ? ({ ...comment, replies: [...replies.filter(({id}) => id !== parent), hydratedComment] })\r\n                        : replies.length\r\n                            ? editReplies(level)\r\n                            : comment);\r\n            }\r\n            await queryDB('UPDATE articles SET comments = $1 WHERE id = $2', [editReplies(comments), articleID]);\r\n        } else await queryDB('UPDATE articles SET comments = array_append(comments, $1) WHERE id = $2', [{name, email, ...hydratedComment}, articleID]);\r\n        if (newUser) { res.json(3); res.end(); return }\r\n        res.json(0);\r\n        res.end();\r\n    } catch (e) { console.log(e) }\r\n    finally { client.release() }\r\n}"]},"metadata":{},"sourceType":"module"}