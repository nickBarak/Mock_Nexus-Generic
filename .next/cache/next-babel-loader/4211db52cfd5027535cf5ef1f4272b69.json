{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { queryDB } from '../../Functions';\nexport default async function (req, res) {\n  let categories = await queryDB(\"SELECT * FROM categories WHERE title <> 'Headlines' AND title <> 'Labyrinth' ORDER BY title\");\n\n  for (let category of categories) {\n    for (let id of category.articles) {\n      let [hydratedArticle] = await queryDB(\"SELECT * FROM articles WHERE id = $1\", [id]);\n      category.articles.splice(category.articles.indexOf(id), 1, hydratedArticle);\n    }\n  }\n\n  res.json(categories.map(category => _objectSpread(_objectSpread({}, category), {}, {\n    articles: category.articles.sort(({\n      publish_date: a\n    }, {\n      publish_date: b\n    }) => b - a)\n  })));\n}","map":{"version":3,"sources":["C:/Users/nicho/Code/Portfolio/mock_nexus/pages/api/get-categories.js"],"names":["queryDB","req","res","categories","category","id","articles","hydratedArticle","splice","indexOf","json","map","sort","publish_date","a","b"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,iBAAxB;AAEA,eAAe,gBAAeC,GAAf,EAAoBC,GAApB,EAAyB;AACpC,MAAIC,UAAU,GAAG,MAAMH,OAAO,CAAC,6FAAD,CAA9B;;AAEA,OAAK,IAAII,QAAT,IAAqBD,UAArB,EAAiC;AAC7B,SAAK,IAAIE,EAAT,IAAeD,QAAQ,CAACE,QAAxB,EAAkC;AAC9B,UAAI,CAACC,eAAD,IAAoB,MAAMP,OAAO,CAAC,sCAAD,EAAyC,CAACK,EAAD,CAAzC,CAArC;AACAD,MAAAA,QAAQ,CAACE,QAAT,CAAkBE,MAAlB,CAAyBJ,QAAQ,CAACE,QAAT,CAAkBG,OAAlB,CAA0BJ,EAA1B,CAAzB,EAAwD,CAAxD,EAA2DE,eAA3D;AACH;AACJ;;AAEDL,EAAAA,GAAG,CAACQ,IAAJ,CAASP,UAAU,CAACQ,GAAX,CAAeP,QAAQ,oCAAUA,QAAV;AAAoBE,IAAAA,QAAQ,EAAEF,QAAQ,CAACE,QAAT,CAAkBM,IAAlB,CAAuB,CAAC;AAACC,MAAAA,YAAY,EAAEC;AAAf,KAAD,EAAoB;AAACD,MAAAA,YAAY,EAAEE;AAAf,KAApB,KAA0CA,CAAC,GAACD,CAAnE;AAA9B,IAAvB,CAAT;AACH","sourcesContent":["import { queryDB } from '../../Functions';\r\n\r\nexport default async function(req, res) {\r\n    let categories = await queryDB(\"SELECT * FROM categories WHERE title <> 'Headlines' AND title <> 'Labyrinth' ORDER BY title\");\r\n\r\n    for (let category of categories) {\r\n        for (let id of category.articles) {\r\n            let [hydratedArticle] = await queryDB(\"SELECT * FROM articles WHERE id = $1\", [id]);\r\n            category.articles.splice(category.articles.indexOf(id), 1, hydratedArticle);\r\n        }\r\n    }\r\n\r\n    res.json(categories.map(category => ({ ...category, articles: category.articles.sort(({publish_date: a}, {publish_date: b}) => b-a) })));\r\n}"]},"metadata":{},"sourceType":"module"}