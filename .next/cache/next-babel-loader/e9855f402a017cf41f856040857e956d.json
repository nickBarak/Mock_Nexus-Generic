{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// import uuid from 'uuidv4';\nimport { testEmail } from '../../Functions';\nimport { queryDB, getUser, insertUser } from '../../db';\nexport default async function (req, res) {\n  let newUser,\n      {\n    name,\n    email,\n    content,\n    article_id,\n    parent,\n    post_date\n  } = req.body;\n\n  if (!testEmail(email)) {\n    res.json(1);\n    res.end();\n    return;\n  }\n\n  let hydratedComment = {\n    article_id,\n    content,\n    post_date,\n    parent,\n    replies: [],\n    id: Math.random()\n  };\n\n  try {\n    let user = await getUser(email);\n\n    if (user) {\n      if (user.name !== name) {\n        res.json(2);\n        res.end();\n        return;\n      }\n\n      await queryDB('UPDATE users SET comments = array_append(comments, $1) WHERE email = $2', [hydratedComment, email]);\n    } else {\n      newUser = true;\n      await insertUser(name, email);\n    }\n\n    if (parent) {\n      let [comments] = await queryDB('SELECT comments FROM articles WHERE id = $1', [article_id]);\n\n      function addReply(level) {\n        return level.map(comment => {\n          let {\n            replies\n          } = comment;\n          return comment.id === parent ? replies.push(_objectSpread({\n            name,\n            email\n          }, hydratedComment)) : replies.find(({\n            id\n          }) => id === parent) ? replies.find(({\n            id\n          }) => id === parent).replies.push(_objectSpread({\n            name,\n            email\n          }, hydratedComment)) : replies.length ? addReply(replies) : 0;\n        });\n      }\n\n      addReply(comments.comments);\n      await queryDB('UPDATE articles SET comments = $1 WHERE id = $2', [article_id]);\n    } else await queryDB('UPDATE articles SET comments = array_append(comments, $1) WHERE id = $2', [_objectSpread({\n      name,\n      email\n    }, hydratedComment), article_id]);\n\n    if (newUser) {\n      res.json(3);\n      res.end();\n      return;\n    }\n\n    res.json(0);\n    res.end();\n  } catch (e) {\n    console.log(e);\n  }\n}","map":{"version":3,"sources":["C:/Users/nicho/Code/Portfolio/mock_nexus/pages/api/post-comment.js"],"names":["testEmail","queryDB","getUser","insertUser","req","res","newUser","name","email","content","article_id","parent","post_date","body","json","end","hydratedComment","replies","id","Math","random","user","comments","addReply","level","map","comment","push","find","length","e","console","log"],"mappings":"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","sourcesContent":["// import uuid from 'uuidv4';\r\nimport { testEmail } from '../../Functions';\r\nimport { queryDB, getUser, insertUser } from '../../db';\r\n\r\nexport default async function(req, res) {\r\n    let newUser,\r\n        { name, email, content, article_id, parent, post_date } = req.body;\r\n    if (!testEmail(email)) { res.json(1); res.end(); return }\r\n    let hydratedComment = { article_id, content, post_date, parent, replies: [], id: Math.random() };\r\n    try {\r\n        let user = await getUser(email);\r\n        if (user) {\r\n            if (user.name !== name) { res.json(2); res.end(); return }\r\n            await queryDB('UPDATE users SET comments = array_append(comments, $1) WHERE email = $2', [hydratedComment, email]);\r\n        } else {\r\n            newUser = true;\r\n            await insertUser(name, email);\r\n        }\r\n        if (parent) {\r\n            let [comments] = await queryDB('SELECT comments FROM articles WHERE id = $1', [article_id]);\r\n            function addReply(level) {\r\n                return level.map(comment => {\r\n                    let { replies } = comment;\r\n                    return comment.id === parent\r\n                        ? replies.push({ name, email, ...hydratedComment })\r\n                        : replies.find(({id}) => id === parent)\r\n                            ? replies.find(({id}) => id === parent).replies.push({ name, email, ...hydratedComment })\r\n                            : replies.length\r\n                                ? addReply(replies)\r\n                                : 0;\r\n                });\r\n            }\r\n            addReply(comments.comments);\r\n            await queryDB('UPDATE articles SET comments = $1 WHERE id = $2', [article_id]);\r\n        } else await queryDB('UPDATE articles SET comments = array_append(comments, $1) WHERE id = $2', [{name, email, ...hydratedComment}, article_id]);\r\n        if (newUser) { res.json(3); res.end(); return }\r\n        res.json(0);\r\n        res.end();\r\n    } catch (e) { console.log(e) }\r\n}"]},"metadata":{},"sourceType":"module"}