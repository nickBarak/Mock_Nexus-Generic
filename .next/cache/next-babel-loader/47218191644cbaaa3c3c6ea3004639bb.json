{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { queryDB } from \"../../../../db\";\nimport ArticleDisplay from '../../../../components/ArticleDisplay';\nimport Layout from \"../../../../layouts\";\nexport async function getStaticPaths() {\n  let authors = await queryDB('SELECT id, articles FROM authors'),\n      paths = authors.reduce((acc, {\n    id,\n    articles\n  }) => [...acc, ...new Array(Math.ceil(articles.length / 15)).fill(true).map((_, i) => ({\n    params: {\n      id: String(id),\n      page: String(i + 1)\n    }\n  }))], []);\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps({\n  params: {\n    id,\n    page\n  }\n}) {\n  let [author] = await queryDB('SELECT * FROM authors WHERE id = $1', [id]),\n      articles = await queryDB(`SELECT * FROM articles WHERE author = $1 ORDER BY publish_date DESC OFFSET ${(Number(page) - 1) * 15} ROWS FETCH NEXT 15 ROWS ONLY`, [JSON.stringify({\n    \"id\": Number(id),\n    \"name\": author.name\n  })]);\n  return {\n    props: JSON.parse(JSON.stringify({\n      author: author.name,\n      articles,\n      footerData: {\n        page: Number(page),\n        highestPage: Math.ceil(author.articles.length / 15),\n        route: '/authors/' + id\n      }\n    }))\n  };\n}\n\nfunction Author({\n  author,\n  articles,\n  footerData\n}) {\n  return __jsx(Layout, {\n    footerData: footerData\n  }, __jsx(ArticleDisplay, {\n    type: \"author-page\",\n    heading: author,\n    articles: articles\n  }));\n}\n\nexport default Author;","map":null,"metadata":{},"sourceType":"module"}