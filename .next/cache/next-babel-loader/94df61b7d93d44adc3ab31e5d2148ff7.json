{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nicho\\\\Code\\\\Portfolio\\\\mock_nexus\\\\pages\\\\authors\\\\[id]\\\\page\\\\[page].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { queryDB } from \"../../../db\";\nimport ArticleDisplay from '../../../components/ArticleDisplay';\nimport Layout from \"../../../layouts\";\nexport async function getStaticPaths() {\n  let [author] = await queryDB('SELECT id, articles FROM authors'),\n      paths = console.log(JSON.stringify(author)) || new Array(Math.ceil(author.articles.length / 15)).fill(true).map((_, i) => ({\n    params: {\n      id: String(author.id),\n      page: String(i + 1)\n    }\n  }));\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps({\n  params: {\n    id,\n    page\n  }\n}) {\n  let [author] = await queryDB('SELECT * FROM authors WHERE id = $1', [id]),\n      articles = await queryDB(`SELECT * FROM articles WHERE author = $1 ORDER BY publish_date DESC OFFSET ${(Number(page) - 1) * 15} ROWS FETCH NEXT 15 ROWS ONLY`, [JSON.stringify({\n    \"id\": Number(id),\n    \"name\": author.name\n  })]);\n  return {\n    props: JSON.parse(JSON.stringify({\n      author: author.name,\n      articles,\n      footerData: {\n        page: Number(page),\n        highestPage: Math.ceil(author.articles.length / 15),\n        route: '/authors/' + id\n      }\n    }))\n  };\n}\n\nfunction Author({\n  author,\n  articles,\n  footerData\n}) {\n  return __jsx(Layout, {\n    footerData: footerData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, __jsx(ArticleDisplay, {\n    type: \"author-page\",\n    heading: author,\n    articles: articles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default Author;","map":{"version":3,"sources":["C:/Users/nicho/Code/Portfolio/mock_nexus/pages/authors/[id]/page/[page].js"],"names":["queryDB","ArticleDisplay","Layout","getStaticPaths","author","paths","console","log","JSON","stringify","Array","Math","ceil","articles","length","fill","map","_","i","params","id","String","page","fallback","getStaticProps","Number","name","props","parse","footerData","highestPage","route","Author"],"mappings":";;;AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AAEA,OAAO,eAAeC,cAAf,GAAgC;AACnC,MAAI,CAACC,MAAD,IAAW,MAAMJ,OAAO,CAAC,kCAAD,CAA5B;AAAA,MACIK,KAAK,GAAGC,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeL,MAAf,CAAZ,KAAuC,IAAIM,KAAJ,CAAUC,IAAI,CAACC,IAAL,CAAUR,MAAM,CAACS,QAAP,CAAgBC,MAAhB,GAAuB,EAAjC,CAAV,EAAgDC,IAAhD,CAAqD,IAArD,EAA2DC,GAA3D,CAA+D,CAACC,CAAD,EAAIC,CAAJ,MAAW;AAAEC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,EAAE,EAAEC,MAAM,CAACjB,MAAM,CAACgB,EAAR,CAAZ;AAAyBE,MAAAA,IAAI,EAAED,MAAM,CAACH,CAAC,GAAC,CAAH;AAArC;AAAV,GAAX,CAA/D,CADnD;AAGA,SAAO;AAAEb,IAAAA,KAAF;AAASkB,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACH;AAED,OAAO,eAAeC,cAAf,CAA8B;AAAEL,EAAAA,MAAM,EAAE;AAAEC,IAAAA,EAAF;AAAME,IAAAA;AAAN;AAAV,CAA9B,EAAwD;AAC3D,MAAI,CAAClB,MAAD,IAAW,MAAMJ,OAAO,CAAC,qCAAD,EAAwC,CAACoB,EAAD,CAAxC,CAA5B;AAAA,MACIP,QAAQ,GAAG,MAAMb,OAAO,CAAE,8EAA6E,CAACyB,MAAM,CAACH,IAAD,CAAN,GAAa,CAAd,IAAiB,EAAG,+BAAnG,EAAmI,CAACd,IAAI,CAACC,SAAL,CAAe;AAAE,UAAMgB,MAAM,CAACL,EAAD,CAAd;AAAoB,YAAQhB,MAAM,CAACsB;AAAnC,GAAf,CAAD,CAAnI,CAD5B;AAGA,SAAO;AAAEC,IAAAA,KAAK,EAAEnB,IAAI,CAACoB,KAAL,CAAWpB,IAAI,CAACC,SAAL,CAAe;AAAEL,MAAAA,MAAM,EAAEA,MAAM,CAACsB,IAAjB;AAAuBb,MAAAA,QAAvB;AAAiCgB,MAAAA,UAAU,EAAE;AACnFP,QAAAA,IAAI,EAAEG,MAAM,CAACH,IAAD,CADuE;AAEnFQ,QAAAA,WAAW,EAAEnB,IAAI,CAACC,IAAL,CAAUR,MAAM,CAACS,QAAP,CAAgBC,MAAhB,GAAyB,EAAnC,CAFsE;AAGnFiB,QAAAA,KAAK,EAAE,cAAcX;AAH8D;AAA7C,KAAf,CAAX;AAAT,GAAP;AAKH;;AAED,SAASY,MAAT,CAAgB;AAAE5B,EAAAA,MAAF;AAAUS,EAAAA,QAAV;AAAoBgB,EAAAA;AAApB,CAAhB,EAAkD;AAC9C,SACI,MAAC,MAAD;AAAQ,IAAA,UAAU,EAAEA,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,cAAD;AAAgB,IAAA,IAAI,EAAC,aAArB;AAAmC,IAAA,OAAO,EAAEzB,MAA5C;AAAoD,IAAA,QAAQ,EAAES,QAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH;;AAED,eAAemB,MAAf","sourcesContent":["import { queryDB } from \"../../../db\";\r\nimport ArticleDisplay from '../../../components/ArticleDisplay';\r\nimport Layout from \"../../../layouts\";\r\n\r\nexport async function getStaticPaths() {\r\n    let [author] = await queryDB('SELECT id, articles FROM authors'),\r\n        paths = console.log(JSON.stringify(author)) || new Array(Math.ceil(author.articles.length/15)).fill(true).map((_, i) => ({ params: { id: String(author.id), page: String(i+1) } }));\r\n\r\n    return { paths, fallback: false }\r\n}\r\n\r\nexport async function getStaticProps({ params: { id, page } }) {\r\n    let [author] = await queryDB('SELECT * FROM authors WHERE id = $1', [id]),\r\n        articles = await queryDB(`SELECT * FROM articles WHERE author = $1 ORDER BY publish_date DESC OFFSET ${(Number(page)-1)*15} ROWS FETCH NEXT 15 ROWS ONLY`, [JSON.stringify({ \"id\": Number(id), \"name\": author.name })]);\r\n\r\n    return { props: JSON.parse(JSON.stringify({ author: author.name, articles, footerData: {\r\n        page: Number(page),\r\n        highestPage: Math.ceil(author.articles.length / 15),\r\n        route: '/authors/' + id\r\n    } })) }\r\n}\r\n\r\nfunction Author({ author, articles, footerData }) {\r\n    return (\r\n        <Layout footerData={footerData}>\r\n            <ArticleDisplay type=\"author-page\" heading={author} articles={articles} />\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default Author"]},"metadata":{},"sourceType":"module"}