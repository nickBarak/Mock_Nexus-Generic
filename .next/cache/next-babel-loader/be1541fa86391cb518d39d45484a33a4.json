{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { config } from 'dotenv';\nimport { Client, Pool } from 'pg';\nconfig();\n\nif (!pool) {\n  var pool = new Pool({\n    max: 200,\n    connectionString: process.env.DATABASE_URL,\n    idleTimeoutMillis: 0\n  });\n  pool ? console.log('Connected to PostgreSQL') : console.log('Failed to connect to database');\n} // export async function queryDB(query, params=[]) {\n//     try {\n//         var client = new Client({ connectionString: process.env.DATABASE_URL }),\n//             { rows } = await client.query(query, params);\n//     } catch (e) { console.log(e) }\n//     finally { client && client.end() }\n//     return rows;\n// }\n\n\nexport function queryDB(_x) {\n  return _queryDB.apply(this, arguments);\n}\n\nfunction _queryDB() {\n  _queryDB = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query) {\n    var params,\n        client,\n        _yield$client$query,\n        rows,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            params = _args.length > 1 && _args[1] !== undefined ? _args[1] : [];\n            _context.prev = 1;\n            _context.next = 4;\n            return pool.connect();\n\n          case 4:\n            client = _context.sent;\n            _context.next = 7;\n            return client.query(query, params);\n\n          case 7:\n            _yield$client$query = _context.sent;\n            rows = _yield$client$query.rows;\n            _context.next = 14;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](1);\n            console.log(_context.t0);\n\n          case 14:\n            _context.prev = 14;\n            client && client.release();\n            return _context.finish(14);\n\n          case 17:\n            return _context.abrupt(\"return\", rows);\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 11, 14, 17]]);\n  }));\n  return _queryDB.apply(this, arguments);\n}\n\nexport function getCategories() {\n  return _getCategories.apply(this, arguments);\n}\n\nfunction _getCategories() {\n  _getCategories = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var categories, _iterator, _step, category, _iterator2, _step2, id, hydratedArticle;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return queryDB(\"SELECT * FROM categories WHERE title <> 'Headlines' AND title <> 'Labyrinth' ORDER BY title\");\n\n          case 2:\n            categories = _context2.sent;\n            _iterator = _createForOfIteratorHelper(categories);\n            _context2.prev = 4;\n\n            _iterator.s();\n\n          case 6:\n            if ((_step = _iterator.n()).done) {\n              _context2.next = 29;\n              break;\n            }\n\n            category = _step.value;\n            _iterator2 = _createForOfIteratorHelper(category.articles);\n            _context2.prev = 9;\n\n            _iterator2.s();\n\n          case 11:\n            if ((_step2 = _iterator2.n()).done) {\n              _context2.next = 19;\n              break;\n            }\n\n            id = _step2.value;\n            _context2.next = 15;\n            return queryDB(\"SELECT * FROM articles WHERE id = $1\", [id]);\n\n          case 15:\n            hydratedArticle = _context2.sent;\n            category.articles.splice(category.articles.indexOf(id), 1, hydratedArticle[0]);\n\n          case 17:\n            _context2.next = 11;\n            break;\n\n          case 19:\n            _context2.next = 24;\n            break;\n\n          case 21:\n            _context2.prev = 21;\n            _context2.t0 = _context2[\"catch\"](9);\n\n            _iterator2.e(_context2.t0);\n\n          case 24:\n            _context2.prev = 24;\n\n            _iterator2.f();\n\n            return _context2.finish(24);\n\n          case 27:\n            _context2.next = 6;\n            break;\n\n          case 29:\n            _context2.next = 34;\n            break;\n\n          case 31:\n            _context2.prev = 31;\n            _context2.t1 = _context2[\"catch\"](4);\n\n            _iterator.e(_context2.t1);\n\n          case 34:\n            _context2.prev = 34;\n\n            _iterator.f();\n\n            return _context2.finish(34);\n\n          case 37:\n            return _context2.abrupt(\"return\", categories.map(function (category) {\n              return _objectSpread(_objectSpread({}, category), {}, {\n                articles: category.articles.sort(function (_ref, _ref2) {\n                  var a = _ref.publish_date;\n                  var b = _ref2.publish_date;\n                  return b - a;\n                })\n              });\n            }));\n\n          case 38:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[4, 31, 34, 37], [9, 21, 24, 27]]);\n  }));\n  return _getCategories.apply(this, arguments);\n}\n\nexport function insertUser(_x2, _x3) {\n  return _insertUser.apply(this, arguments);\n}\n\nfunction _insertUser() {\n  _insertUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(name, email) {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return queryDB('INSERT INTO users (name, email, comments, following) VALUES ($1, $2, $3, $4)', [name, email, [], []]);\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _insertUser.apply(this, arguments);\n}\n\nexport function getUser(_x4) {\n  return _getUser.apply(this, arguments);\n} // function spawnPool() {\n//     if (!pool) {\n//         var pool = new Pool({\n//             max: 200,\n//             connectionString: process.env.DATABASE_URL,\n//             idleTimeoutMillis: 0\n//         });\n//         pool\n//             ? console.log('Connected to PostgreSQL')\n//             : console.log('Failed to connect to database');\n//     }\n//     return pool;\n// }\n\nfunction _getUser() {\n  _getUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(email) {\n    var _yield$queryDB, _yield$queryDB2, user;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return queryDB('SELECT * FROM users WHERE email = $1', [email]);\n\n          case 2:\n            _yield$queryDB = _context4.sent;\n            _yield$queryDB2 = _slicedToArray(_yield$queryDB, 1);\n            user = _yield$queryDB2[0];\n            return _context4.abrupt(\"return\", user);\n\n          case 6:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _getUser.apply(this, arguments);\n}","map":{"version":3,"sources":["C:/Users/nicho/Code/Portfolio/mock_nexus/db.js"],"names":["config","Client","Pool","pool","max","connectionString","process","env","DATABASE_URL","idleTimeoutMillis","console","log","queryDB","query","params","connect","client","rows","release","getCategories","categories","category","articles","id","hydratedArticle","splice","indexOf","map","sort","a","publish_date","b","insertUser","name","email","getUser","user"],"mappings":"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","sourcesContent":["import { config } from 'dotenv';\r\nimport { Client, Pool } from 'pg';\r\nconfig();\r\n\r\nif (!pool) {\r\n    var pool = new Pool({\r\n        max: 200,\r\n        connectionString: process.env.DATABASE_URL,\r\n        idleTimeoutMillis: 0\r\n    });\r\n    pool\r\n        ? console.log('Connected to PostgreSQL')\r\n        : console.log('Failed to connect to database');\r\n}\r\n\r\n// export async function queryDB(query, params=[]) {\r\n//     try {\r\n//         var client = new Client({ connectionString: process.env.DATABASE_URL }),\r\n//             { rows } = await client.query(query, params);\r\n//     } catch (e) { console.log(e) }\r\n//     finally { client && client.end() }\r\n//     return rows;\r\n// }\r\nexport async function queryDB(query, params=[]) {\r\n    try {\r\n        var client = await pool.connect(),\r\n            { rows } = await client.query(query, params);\r\n    } catch (e) { console.log(e) }\r\n    finally { client && client.release() }\r\n    return rows;\r\n}\r\n\r\nexport async function getCategories() {\r\n    let categories = await queryDB(\"SELECT * FROM categories WHERE title <> 'Headlines' AND title <> 'Labyrinth' ORDER BY title\");\r\n\r\n    for (let category of categories) {\r\n        for (let id of category.articles) {\r\n            let hydratedArticle = await queryDB(\"SELECT * FROM articles WHERE id = $1\", [id]);\r\n            category.articles.splice(category.articles.indexOf(id), 1, hydratedArticle[0]);\r\n        }\r\n    }\r\n\r\n    return categories.map(category => ({ ...category, articles: category.articles.sort(({publish_date: a}, {publish_date: b}) => b-a) }));\r\n}\r\n\r\nexport async function insertUser(name, email) {\r\n    await queryDB('INSERT INTO users (name, email, comments, following) VALUES ($1, $2, $3, $4)', [name, email, [], []]);\r\n}\r\n\r\nexport async function getUser(email) {\r\n   let [user] = await queryDB('SELECT * FROM users WHERE email = $1', [email]);\r\n    return user;\r\n}\r\n\r\n// function spawnPool() {\r\n//     if (!pool) {\r\n//         var pool = new Pool({\r\n//             max: 200,\r\n//             connectionString: process.env.DATABASE_URL,\r\n//             idleTimeoutMillis: 0\r\n//         });\r\n//         pool\r\n//             ? console.log('Connected to PostgreSQL')\r\n//             : console.log('Failed to connect to database');\r\n//     }\r\n//     return pool;\r\n// }"]},"metadata":{},"sourceType":"module"}