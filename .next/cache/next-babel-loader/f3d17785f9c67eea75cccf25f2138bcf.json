{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nicho\\\\Code\\\\Portfolio\\\\mock_nexus\\\\pages\\\\authors\\\\[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { queryDB } from \"../../db\";\nimport ArticleDisplay from '../../components/ArticleDisplay';\nimport Layout from \"../../layouts\";\nexport async function getStaticPaths() {\n  let ids = await queryDB('SELECT id FROM authors'),\n      paths = ids.map(id => ({\n    params: {\n      id: String(id.id)\n    }\n  }));\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps({\n  params: {\n    id\n  }\n}) {\n  let [author] = await queryDB('SELECT * FROM authors WHERE id = $1', [id]),\n      articles = await queryDB(\"SELECT * FROM articles WHERE author = $1 ORDER BY publish_date DESC FETCH FIRST 15 ROWS ONLY\", [JSON.stringify({\n    \"id\": Number(id),\n    \"name\": author.name\n  })]);\n  return {\n    props: JSON.parse(JSON.stringify({\n      author: author.name,\n      articles,\n      footerData: {\n        page: 1,\n        highestPage: Math.ceil(articles.length / 15),\n        route: '/authors/' + id\n      }\n    }))\n  };\n}\n\nfunction Author({\n  author,\n  articles,\n  footerData\n}) {\n  return __jsx(Layout, {\n    footerData: footerData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, __jsx(ArticleDisplay, {\n    type: \"author-page\",\n    heading: author,\n    articles: articles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default Author;","map":{"version":3,"sources":["C:/Users/nicho/Code/Portfolio/mock_nexus/pages/authors/[id].js"],"names":["queryDB","ArticleDisplay","Layout","getStaticPaths","ids","paths","map","id","params","String","fallback","getStaticProps","author","articles","JSON","stringify","Number","name","props","parse","footerData","page","highestPage","Math","ceil","length","route","Author"],"mappings":";;;AAAA,SAASA,OAAT,QAAwB,UAAxB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,MAAP,MAAmB,eAAnB;AAEA,OAAO,eAAeC,cAAf,GAAgC;AACnC,MAAIC,GAAG,GAAG,MAAMJ,OAAO,CAAC,wBAAD,CAAvB;AAAA,MACIK,KAAK,GAAGD,GAAG,CAACE,GAAJ,CAAQC,EAAE,KAAK;AAAEC,IAAAA,MAAM,EAAE;AAAED,MAAAA,EAAE,EAAEE,MAAM,CAACF,EAAE,CAACA,EAAJ;AAAZ;AAAV,GAAL,CAAV,CADZ;AAGA,SAAO;AAAEF,IAAAA,KAAF;AAASK,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACH;AAED,OAAO,eAAeC,cAAf,CAA8B;AAAEH,EAAAA,MAAM,EAAE;AAAED,IAAAA;AAAF;AAAV,CAA9B,EAAkD;AACrD,MAAI,CAACK,MAAD,IAAW,MAAMZ,OAAO,CAAC,qCAAD,EAAwC,CAACO,EAAD,CAAxC,CAA5B;AAAA,MACIM,QAAQ,GAAG,MAAMb,OAAO,CAAC,8FAAD,EAAiG,CAACc,IAAI,CAACC,SAAL,CAAe;AAAE,UAAMC,MAAM,CAACT,EAAD,CAAd;AAAoB,YAAQK,MAAM,CAACK;AAAnC,GAAf,CAAD,CAAjG,CAD5B;AAGA,SAAO;AAAEC,IAAAA,KAAK,EAAEJ,IAAI,CAACK,KAAL,CAAWL,IAAI,CAACC,SAAL,CAAe;AAAEH,MAAAA,MAAM,EAAEA,MAAM,CAACK,IAAjB;AAAuBJ,MAAAA,QAAvB;AAAiCO,MAAAA,UAAU,EAAE;AACnFC,QAAAA,IAAI,EAAE,CAD6E;AAEnFC,QAAAA,WAAW,EAAEC,IAAI,CAACC,IAAL,CAAUX,QAAQ,CAACY,MAAT,GAAkB,EAA5B,CAFsE;AAGnFC,QAAAA,KAAK,EAAE,cAAcnB;AAH8D;AAA7C,KAAf,CAAX;AAAT,GAAP;AAKH;;AAED,SAASoB,MAAT,CAAgB;AAAEf,EAAAA,MAAF;AAAUC,EAAAA,QAAV;AAAoBO,EAAAA;AAApB,CAAhB,EAAkD;AAC9C,SACI,MAAC,MAAD;AAAQ,IAAA,UAAU,EAAEA,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,cAAD;AAAgB,IAAA,IAAI,EAAC,aAArB;AAAmC,IAAA,OAAO,EAAER,MAA5C;AAAoD,IAAA,QAAQ,EAAEC,QAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH;;AAED,eAAec,MAAf","sourcesContent":["import { queryDB } from \"../../db\";\r\nimport ArticleDisplay from '../../components/ArticleDisplay';\r\nimport Layout from \"../../layouts\";\r\n\r\nexport async function getStaticPaths() {\r\n    let ids = await queryDB('SELECT id FROM authors'),\r\n        paths = ids.map(id => ({ params: { id: String(id.id) } }));\r\n\r\n    return { paths, fallback: false }\r\n}\r\n\r\nexport async function getStaticProps({ params: { id } }) {\r\n    let [author] = await queryDB('SELECT * FROM authors WHERE id = $1', [id]),\r\n        articles = await queryDB(\"SELECT * FROM articles WHERE author = $1 ORDER BY publish_date DESC FETCH FIRST 15 ROWS ONLY\", [JSON.stringify({ \"id\": Number(id), \"name\": author.name })]);\r\n\r\n    return { props: JSON.parse(JSON.stringify({ author: author.name, articles, footerData: {\r\n        page: 1,\r\n        highestPage: Math.ceil(articles.length / 15),\r\n        route: '/authors/' + id\r\n    } })) }\r\n}\r\n\r\nfunction Author({ author, articles, footerData }) {\r\n    return (\r\n        <Layout footerData={footerData}>\r\n            <ArticleDisplay type=\"author-page\" heading={author} articles={articles} />\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default Author"]},"metadata":{},"sourceType":"module"}