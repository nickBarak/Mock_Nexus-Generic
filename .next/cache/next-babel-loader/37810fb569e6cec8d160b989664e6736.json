{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// import uuid from 'uuidv4';\nimport { testEmail, queryDB, getUser, insertUser } from '../../Functions';\nexport default async function (req, res) {\n  let newUser,\n      {\n    name,\n    email,\n    content,\n    article_id,\n    parent,\n    post_date\n  } = req.body;\n\n  if (!testEmail(email)) {\n    res.json(1);\n    res.end();\n    return;\n  }\n\n  let hydratedComment = {\n    article_id,\n    content,\n    post_date,\n    parent,\n    replies: [],\n    id: Math.random()\n  };\n\n  try {\n    let user = await getUser(email);\n\n    if (user) {\n      if (user.name !== name) {\n        res.json(2);\n        res.end();\n        return;\n      }\n\n      await queryDB('UPDATE users SET comments = array_append(comments, $1) WHERE email = $2', [hydratedComment, email]);\n    } else {\n      newUser = true;\n      await insertUser(name, email);\n    }\n\n    if (parent) {\n      let [comments] = await queryDB('SELECT comments FROM articles WHERE id = $1', [article_id]);\n\n      function editReplies(level) {\n        return level.map(comment => {\n          let {\n            replies\n          } = comment;\n          return comment.id === parent ? _objectSpread(_objectSpread({}, comment), {}, {\n            replies: [...replies.filter(({\n              id\n            }) => id !== parent), _objectSpread({\n              name,\n              email\n            }, hydratedComment)]\n          }) : replies.find(({\n            id\n          }) => id === parent) ? _objectSpread(_objectSpread({}, comment), {}, {\n            replies: [...replies.filter(({\n              id\n            }) => id !== parent), _objectSpread({\n              name,\n              email\n            }, hydratedComment)]\n          }) : replies.length ? editReplies(replies) : comment;\n        });\n      }\n\n      await queryDB('UPDATE articles SET comments = $1 WHERE id = $2', [editReplies(comments.comments), article_id]);\n    } else await queryDB('UPDATE articles SET comments = array_append(comments, $1) WHERE id = $2', [_objectSpread({\n      name,\n      email\n    }, hydratedComment), article_id]);\n\n    if (newUser) {\n      res.json(3);\n      res.end();\n      return;\n    }\n\n    res.json(0);\n    res.end();\n  } catch (e) {\n    console.log(e);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}