{"ast":null,"code":"import 'isomorphic-unfetch';\nexport function convertDate(date) {\n  let now = new Date(),\n      secondsPast = (now.getTime() - date) / 1000;\n\n  if (secondsPast < 60) {\n    return parseInt(secondsPast) + ` second${parseInt(secondsPast) > 1 ? 's' : ''} ago`;\n  }\n\n  if (secondsPast < 3600) {\n    return parseInt(secondsPast / 60) + ` minute${parseInt(secondsPast / 60) > 1 ? 's' : ''} ago`;\n  }\n\n  if (secondsPast <= 86400) {\n    return parseInt(secondsPast / 3600) + ` hour${parseInt(secondsPast / 3600) > 1 ? 's' : ''} ago`;\n  }\n\n  return new Date(date).toLocaleDateString('default', {\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric'\n  });\n}\nexport function convertToPath(string) {\n  return string.toLowerCase().replace(/ /g, '-').replace(/[:'!@#$%^&*\\(\\)\";{}\\[\\]\\|~`<>\\/\\\\?\\.,]/g, '');\n}\nexport function convertFromPath(path) {\n  return path.split('-').map((word, i) => i === 0 || !['the', 'on'].includes(word) ? word[0].toUpperCase() + word.slice(1) : word).join(' ');\n}\nexport function testEmail(email) {\n  return /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/.test(email);\n}\nexport async function postComment(e, setMessage, article_id, parent = null) {\n  e.persist();\n  const [content, name, email] = [0, 1, 2].map(i => e.target.children[i].children[1].value);\n\n  if (!content || !name || !email) {\n    return setMessage('There is an empty field');\n  }\n\n  let response = await fetch('../api/post-comment', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      article_id,\n      name,\n      email,\n      content,\n      parent,\n      post_date: Date.now()\n    })\n  });\n  let status = await response.json(),\n      msg;\n\n  switch (status) {\n    case 0:\n      setMessage('');\n      break;\n\n    case 1:\n      msg = 'Invalid email address';\n      break;\n\n    case 2:\n      msg = 'This email is registered with a different name';\n      break;\n\n    case 3:\n      msg = 'New user created';\n      break;\n\n    default:\n      console.log(status);\n  }\n\n  msg && setMessage(msg);\n  (!status || status === 3) && !sessionStorage.getItem('email') || sessionStorage.setItem('email', email) || sessionStorage.setItem('name', name);\n  e.target.reset();\n}\nexport async function getCategories() {\n  let response = await fetch('/api/get-categories');\n  return await response.json();\n}\nexport async function insertUser(name, email) {\n  fetch('/api/insert-user', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name,\n      email\n    })\n  });\n}\nexport async function getUser(email) {\n  let response = await fetch('/api/get-user?email=' + email);\n  return await response.json();\n}\nexport async function queryDB(query, params = []) {\n  let response = await fetch('/api/query-db', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query,\n      params\n    })\n  });\n  return await response.json();\n}","map":{"version":3,"sources":["C:/Users/nicho/Code/Portfolio/mock_nexus/Functions.js"],"names":["convertDate","date","now","Date","secondsPast","getTime","parseInt","toLocaleDateString","day","month","year","convertToPath","string","toLowerCase","replace","convertFromPath","path","split","map","word","i","includes","toUpperCase","slice","join","testEmail","email","test","postComment","e","setMessage","article_id","parent","persist","content","name","target","children","value","response","fetch","method","headers","body","JSON","stringify","post_date","status","json","msg","console","log","sessionStorage","getItem","setItem","reset","getCategories","insertUser","getUser","queryDB","query","params"],"mappings":"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","sourcesContent":["import 'isomorphic-unfetch';\r\n\r\nexport function convertDate(date) {\r\n    let now = new Date(),\r\n        secondsPast = (now.getTime() - date) / 1000;\r\n    if (secondsPast < 60) {\r\n        return parseInt(secondsPast) + ` second${parseInt(secondsPast) > 1 ? 's' : ''} ago`;\r\n    }\r\n    if (secondsPast < 3600) {\r\n        return parseInt(secondsPast / 60) + ` minute${parseInt(secondsPast / 60) > 1 ? 's' : ''} ago`;\r\n    }\r\n    if (secondsPast <= 86400) {\r\n        return parseInt(secondsPast / 3600) + ` hour${parseInt(secondsPast / 3600) > 1 ? 's' : ''} ago`;\r\n    }\r\n    return new Date(date).toLocaleDateString('default', { day: 'numeric', month: 'long', year: 'numeric' })\r\n}\r\n\r\nexport function convertToPath(string) {\r\n    return string.toLowerCase().replace(/ /g, '-').replace(/[:'!@#$%^&*\\(\\)\";{}\\[\\]\\|~`<>\\/\\\\?\\.,]/g, '')\r\n}\r\n\r\nexport function convertFromPath(path) {\r\n    return path.split('-').map((word, i) => (i === 0 || !['the', 'on'].includes(word)) ? word[0].toUpperCase() + word.slice(1) : word).join(' ')\r\n}\r\n\r\nexport function testEmail(email) {\r\n    return /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/.test(email)\r\n}\r\n\r\nexport async function postComment(e, setMessage, article_id, parent=null) {\r\n        e.persist();\r\n        const [content, name, email] = [0, 1, 2].map(i => e.target.children[i].children[1].value);\r\n        if (!content || !name || !email) { return setMessage('There is an empty field') }\r\n        let response = await fetch('../api/post-comment', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                article_id,\r\n                name,\r\n                email,\r\n                content,\r\n                parent,\r\n                post_date: Date.now()\r\n            })\r\n        });\r\n\r\n        let status = await response.json(),\r\n            msg;\r\n        switch (status) {\r\n            case 0:\r\n                setMessage('');\r\n                break;\r\n            case 1:\r\n                msg = 'Invalid email address';\r\n                break;\r\n            case 2:\r\n                msg = 'This email is registered with a different name';\r\n                break;\r\n            case 3:\r\n                msg = 'New user created';\r\n                break;\r\n            default:\r\n                console.log(status);\r\n        }\r\n        msg && setMessage(msg);\r\n        (!status || status === 3)\r\n            && !sessionStorage.getItem('email')\r\n            || sessionStorage.setItem('email', email)\r\n            || sessionStorage.setItem('name', name);\r\n        e.target.reset();\r\n}\r\n\r\nexport async function getCategories() {\r\n    let response = await fetch('/api/get-categories');\r\n    return await response.json();\r\n}\r\n\r\nexport async function insertUser(name, email) {\r\n    fetch('/api/insert-user', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n            name,\r\n            email\r\n        })\r\n    })\r\n}\r\n\r\nexport async function getUser(email) {\r\n    let response = await fetch('/api/get-user?email=' + email);\r\n    return await response.json();\r\n}\r\n\r\nexport async function queryDB(query, params=[]) {\r\n    let response = await fetch('/api/query-db', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n            query,\r\n            params\r\n        })\r\n    });\r\n    return await response.json()\r\n}"]},"metadata":{},"sourceType":"module"}