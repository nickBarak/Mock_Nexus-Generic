{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nexport function queryDB(_x, _x2) {\n  return _queryDB.apply(this, arguments);\n}\n\nfunction _queryDB() {\n  _queryDB = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(pool, query) {\n    var params,\n        client,\n        _yield$client$query,\n        rows,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            params = _args.length > 2 && _args[2] !== undefined ? _args[2] : [];\n            _context.prev = 1;\n            _context.next = 4;\n            return pool.connect();\n\n          case 4:\n            client = _context.sent;\n            _context.next = 7;\n            return client.query(query, params);\n\n          case 7:\n            _yield$client$query = _context.sent;\n            rows = _yield$client$query.rows;\n            _context.next = 14;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](1);\n            console.log(_context.t0);\n\n          case 14:\n            _context.prev = 14;\n            client.release();\n            return _context.finish(14);\n\n          case 17:\n            return _context.abrupt(\"return\", rows);\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 11, 14, 17]]);\n  }));\n  return _queryDB.apply(this, arguments);\n}\n\nexport function getCategories(_x3) {\n  return _getCategories.apply(this, arguments);\n}\n\nfunction _getCategories() {\n  _getCategories = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(pool) {\n    var categories, _iterator, _step, category, _iterator2, _step2, id, hydratedArticle;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return queryDB(pool, \"SELECT * FROM categories WHERE title <> 'Headlines' AND title <> 'Labyrinth'\");\n\n          case 2:\n            categories = _context2.sent;\n            _iterator = _createForOfIteratorHelper(categories);\n            _context2.prev = 4;\n\n            _iterator.s();\n\n          case 6:\n            if ((_step = _iterator.n()).done) {\n              _context2.next = 29;\n              break;\n            }\n\n            category = _step.value;\n            _iterator2 = _createForOfIteratorHelper(category.articles);\n            _context2.prev = 9;\n\n            _iterator2.s();\n\n          case 11:\n            if ((_step2 = _iterator2.n()).done) {\n              _context2.next = 19;\n              break;\n            }\n\n            id = _step2.value;\n            _context2.next = 15;\n            return queryDB(pool, \"SELECT * FROM articles WHERE id = $1\", [id]);\n\n          case 15:\n            hydratedArticle = _context2.sent;\n            category.articles.splice(category.articles.indexOf(id), 1, hydratedArticle[0]);\n\n          case 17:\n            _context2.next = 11;\n            break;\n\n          case 19:\n            _context2.next = 24;\n            break;\n\n          case 21:\n            _context2.prev = 21;\n            _context2.t0 = _context2[\"catch\"](9);\n\n            _iterator2.e(_context2.t0);\n\n          case 24:\n            _context2.prev = 24;\n\n            _iterator2.f();\n\n            return _context2.finish(24);\n\n          case 27:\n            _context2.next = 6;\n            break;\n\n          case 29:\n            _context2.next = 34;\n            break;\n\n          case 31:\n            _context2.prev = 31;\n            _context2.t1 = _context2[\"catch\"](4);\n\n            _iterator.e(_context2.t1);\n\n          case 34:\n            _context2.prev = 34;\n\n            _iterator.f();\n\n            return _context2.finish(34);\n\n          case 37:\n            return _context2.abrupt(\"return\", categories);\n\n          case 38:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[4, 31, 34, 37], [9, 21, 24, 27]]);\n  }));\n  return _getCategories.apply(this, arguments);\n}\n\nexport function convertDate(date) {\n  return new Date(date).toLocaleDateString('default', {\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric'\n  });\n}","map":{"version":3,"sources":["C:/Users/nicho/code/portfolio/mock_nexus/Functions.js"],"names":["queryDB","pool","query","params","connect","client","rows","console","log","release","getCategories","categories","category","articles","id","hydratedArticle","splice","indexOf","convertDate","date","Date","toLocaleDateString","day","month","year"],"mappings":";;;;;;;;;AAAA,gBAAsBA,OAAtB;AAAA;AAAA;;;sEAAO,iBAAuBC,IAAvB,EAA6BC,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAoCC,YAAAA,MAApC,2DAA2C,EAA3C;AAAA;AAAA;AAAA,mBAEoBF,IAAI,CAACG,OAAL,EAFpB;;AAAA;AAEKC,YAAAA,MAFL;AAAA;AAAA,mBAGsBA,MAAM,CAACH,KAAP,CAAaA,KAAb,EAAoBC,MAApB,CAHtB;;AAAA;AAAA;AAGOG,YAAAA,IAHP,uBAGOA,IAHP;AAAA;AAAA;;AAAA;AAAA;AAAA;AAIWC,YAAAA,OAAO,CAACC,GAAR;;AAJX;AAAA;AAKOH,YAAAA,MAAM,CAACI,OAAP;AALP;;AAAA;AAAA,6CAMIH,IANJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AASP,gBAAsBI,aAAtB;AAAA;AAAA;;;4EAAO,kBAA6BT,IAA7B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACoBD,OAAO,CAACC,IAAD,EAAO,8EAAP,CAD3B;;AAAA;AACCU,YAAAA,UADD;AAAA,mDAGkBA,UAHlB;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGMC,YAAAA,QAHN;AAAA,oDAIgBA,QAAQ,CAACC,QAJzB;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIUC,YAAAA,EAJV;AAAA;AAAA,mBAKiCd,OAAO,CAACC,IAAD,EAAO,sCAAP,EAA+C,CAACa,EAAD,CAA/C,CALxC;;AAAA;AAKSC,YAAAA,eALT;AAMKH,YAAAA,QAAQ,CAACC,QAAT,CAAkBG,MAAlB,CAAyBJ,QAAQ,CAACC,QAAT,CAAkBI,OAAlB,CAA0BH,EAA1B,CAAzB,EAAwD,CAAxD,EAA2DC,eAAe,CAAC,CAAD,CAA1E;;AANL;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA,8CAUIJ,UAVJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAaP,OAAO,SAASO,WAAT,CAAqBC,IAArB,EAA2B;AAC9B,SAAO,IAAIC,IAAJ,CAASD,IAAT,EAAeE,kBAAf,CAAkC,SAAlC,EAA6C;AAAEC,IAAAA,GAAG,EAAE,SAAP;AAAkBC,IAAAA,KAAK,EAAE,MAAzB;AAAiCC,IAAAA,IAAI,EAAE;AAAvC,GAA7C,CAAP;AACH","sourcesContent":["export async function queryDB(pool, query, params=[]) {\r\n    try {\r\n        var client = await pool.connect(),\r\n            { rows } = await client.query(query, params);\r\n    } catch (e) { console.log(e) }\r\n    finally { client.release() }\r\n    return rows;\r\n}\r\n\r\nexport async function getCategories(pool) {\r\n    let categories = await queryDB(pool, \"SELECT * FROM categories WHERE title <> 'Headlines' AND title <> 'Labyrinth'\");\r\n\r\n    for (let category of categories) {\r\n        for (let id of category.articles) {\r\n            let hydratedArticle = await queryDB(pool, \"SELECT * FROM articles WHERE id = $1\", [id]);\r\n            category.articles.splice(category.articles.indexOf(id), 1, hydratedArticle[0]);\r\n        }\r\n    }\r\n\r\n    return categories;\r\n}\r\n\r\nexport function convertDate(date) {\r\n    return new Date(date).toLocaleDateString('default', { day: 'numeric', month: 'long', year: 'numeric' })\r\n}"]},"metadata":{},"sourceType":"module"}