{"ast":null,"code":"export function convertDate(date) {\n  var alternate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (alternate) {\n    var now = new Date(),\n        secondsPast = (now.getTime() - date) / 1000;\n\n    if (secondsPast < 60) {\n      return parseInt(secondsPast) + \" second\".concat(parseInt(secondsPast / 60) > 1 ? 's' : '');\n    }\n\n    if (secondsPast < 3600) {\n      return parseInt(secondsPast / 60) + \" month\".concat(parseInt(secondsPast / 3600) > 1 ? 's' : '');\n    }\n\n    if (secondsPast <= 86400) {\n      return parseInt(secondsPast / 3600) + \" hour\".concat(parseInt(secondsPast / 3600) > 1 ? 's' : '');\n    }\n\n    if (secondsPast > 86400) {\n      day = date.getDate();\n      month = date.toDateString().match(/ [a-zA-Z]*/)[0].replace(\" \", \"\");\n      year = date.getFullYear() == now.getFullYear() ? \"\" : \" \" + date.getFullYear();\n      return day + \" \" + month + year + 'ago';\n    }\n  }\n\n  return new Date(date).toLocaleDateString('default', {\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric'\n  });\n}\nexport function convertToPath(string) {\n  return string.toLowerCase().replace(/ /g, '-').replace(/[:'!@#$%^&*\\(\\)\";{}\\[\\]\\|~`<>\\/\\\\?\\.,]/g, '');\n}\nexport function convertFromPath(path) {\n  return path.split('-').map(function (word, i) {\n    return i === 0 || !['the', 'on'].includes(word) ? word[0].toUpperCase() + word.slice(1) : word;\n  }).join(' ');\n}","map":{"version":3,"sources":["C:/Users/nicho/Code/Portfolio/mock_nexus/Functions.js"],"names":["convertDate","date","alternate","now","Date","secondsPast","getTime","parseInt","day","getDate","month","toDateString","match","replace","year","getFullYear","toLocaleDateString","convertToPath","string","toLowerCase","convertFromPath","path","split","map","word","i","includes","toUpperCase","slice","join"],"mappings":"AAAA,OAAO,SAASA,WAAT,CAAqBC,IAArB,EAA4C;AAAA,MAAjBC,SAAiB,uEAAP,KAAO;;AAC/C,MAAIA,SAAJ,EAAe;AACX,QAAIC,GAAG,GAAG,IAAIC,IAAJ,EAAV;AAAA,QACIC,WAAW,GAAG,CAACF,GAAG,CAACG,OAAJ,KAAgBL,IAAjB,IAAyB,IAD3C;;AAEA,QAAII,WAAW,GAAG,EAAlB,EAAsB;AAClB,aAAOE,QAAQ,CAACF,WAAD,CAAR,oBAAkCE,QAAQ,CAACF,WAAW,GAAG,EAAf,CAAR,GAA6B,CAA7B,GAAiC,GAAjC,GAAuC,EAAzE,CAAP;AACH;;AACD,QAAIA,WAAW,GAAG,IAAlB,EAAwB;AACpB,aAAOE,QAAQ,CAACF,WAAW,GAAG,EAAf,CAAR,mBAAsCE,QAAQ,CAACF,WAAW,GAAG,IAAf,CAAR,GAA+B,CAA/B,GAAmC,GAAnC,GAAyC,EAA/E,CAAP;AACH;;AACD,QAAIA,WAAW,IAAI,KAAnB,EAA0B;AACtB,aAAOE,QAAQ,CAACF,WAAW,GAAG,IAAf,CAAR,kBAAuCE,QAAQ,CAACF,WAAW,GAAG,IAAf,CAAR,GAA+B,CAA/B,GAAmC,GAAnC,GAAyC,EAAhF,CAAP;AACH;;AACD,QAAIA,WAAW,GAAG,KAAlB,EAAyB;AACrBG,MAAAA,GAAG,GAAGP,IAAI,CAACQ,OAAL,EAAN;AACAC,MAAAA,KAAK,GAAGT,IAAI,CAACU,YAAL,GAAoBC,KAApB,CAA0B,YAA1B,EAAwC,CAAxC,EAA2CC,OAA3C,CAAmD,GAAnD,EAAwD,EAAxD,CAAR;AACAC,MAAAA,IAAI,GAAGb,IAAI,CAACc,WAAL,MAAsBZ,GAAG,CAACY,WAAJ,EAAtB,GAA0C,EAA1C,GAA+C,MAAMd,IAAI,CAACc,WAAL,EAA5D;AACA,aAAOP,GAAG,GAAG,GAAN,GAAYE,KAAZ,GAAoBI,IAApB,GAA2B,KAAlC;AACH;AACJ;;AACD,SAAO,IAAIV,IAAJ,CAASH,IAAT,EAAee,kBAAf,CAAkC,SAAlC,EAA6C;AAAER,IAAAA,GAAG,EAAE,SAAP;AAAkBE,IAAAA,KAAK,EAAE,MAAzB;AAAiCI,IAAAA,IAAI,EAAE;AAAvC,GAA7C,CAAP;AACH;AAED,OAAO,SAASG,aAAT,CAAuBC,MAAvB,EAA+B;AAClC,SAAOA,MAAM,CAACC,WAAP,GAAqBN,OAArB,CAA6B,IAA7B,EAAmC,GAAnC,EAAwCA,OAAxC,CAAgD,yCAAhD,EAA2F,EAA3F,CAAP;AACH;AAED,OAAO,SAASO,eAAT,CAAyBC,IAAzB,EAA+B;AAClC,SAAOA,IAAI,CAACC,KAAL,CAAW,GAAX,EAAgBC,GAAhB,CAAoB,UAACC,IAAD,EAAOC,CAAP;AAAA,WAAcA,CAAC,KAAK,CAAN,IAAW,CAAC,CAAC,KAAD,EAAQ,IAAR,EAAcC,QAAd,CAAuBF,IAAvB,CAAb,GAA6CA,IAAI,CAAC,CAAD,CAAJ,CAAQG,WAAR,KAAwBH,IAAI,CAACI,KAAL,CAAW,CAAX,CAArE,GAAqFJ,IAAlG;AAAA,GAApB,EAA4HK,IAA5H,CAAiI,GAAjI,CAAP;AACH","sourcesContent":["export function convertDate(date, alternate=false) {\r\n    if (alternate) {\r\n        let now = new Date(),\r\n            secondsPast = (now.getTime() - date) / 1000;\r\n        if (secondsPast < 60) {\r\n            return parseInt(secondsPast) + ` second${parseInt(secondsPast / 60) > 1 ? 's' : ''}`;\r\n        }\r\n        if (secondsPast < 3600) {\r\n            return parseInt(secondsPast / 60) + ` month${parseInt(secondsPast / 3600) > 1 ? 's' : ''}`;\r\n        }\r\n        if (secondsPast <= 86400) {\r\n            return parseInt(secondsPast / 3600) + ` hour${parseInt(secondsPast / 3600) > 1 ? 's' : ''}`;\r\n        }\r\n        if (secondsPast > 86400) {\r\n            day = date.getDate();\r\n            month = date.toDateString().match(/ [a-zA-Z]*/)[0].replace(\" \", \"\");\r\n            year = date.getFullYear() == now.getFullYear() ? \"\" : \" \" + date.getFullYear();\r\n            return day + \" \" + month + year + 'ago';\r\n        }\r\n    }\r\n    return new Date(date).toLocaleDateString('default', { day: 'numeric', month: 'long', year: 'numeric' })\r\n}\r\n\r\nexport function convertToPath(string) {\r\n    return string.toLowerCase().replace(/ /g, '-').replace(/[:'!@#$%^&*\\(\\)\";{}\\[\\]\\|~`<>\\/\\\\?\\.,]/g, '')\r\n}\r\n\r\nexport function convertFromPath(path) {\r\n    return path.split('-').map((word, i) => (i === 0 || !['the', 'on'].includes(word)) ? word[0].toUpperCase() + word.slice(1) : word).join(' ')\r\n}"]},"metadata":{},"sourceType":"module"}