{"ast":null,"code":"import { queryDB } from \"../../db\";\nexport default async function (req, res) {\n  try {\n    const results = await queryDB(`SELECT * FROM\n                (SELECT DISTINCT ON\n                    (id) id,\n                    title,\n                    category,\n                    subcategory,\n                    publish_date,\n                    full_thumbnail,\n                    mobile_thumbnail,\n                    description,\n                    content,\n                    src_url,\n                    author,\n                    related,\n                    comments,\n                    followers\n                FROM articles) x\n                WHERE\n                    LOWER(title) LIKE LOWER('%${req.query.value}%')\n                    OR LOWER(description) LIKE LOWER('%${req.query.value}%')\n                    OR LOWER(category) LIKE LOWER('%${req.query.value}%')\n                    OR LOWER(subcategory) LIKE LOWER('%${req.query.value}%')\n                    OR LOWER(content) LIKE LOWER('%${req.query.value}%')`);\n    const authorArticleIDs = await queryDB(`SELECT articles FROM authors WHERE LOWER(name) LIKE LOWER('%${req.body.value}%')`);\n    const authorResults = await queryDB('SELECT * FROM articles WHERE id = ANY($1)', [authorArticleIDs]);\n    console.log(JSON.stringify(results.rows));\n    res.json(results ? authorResults ? [...results.rows, ...authorResults] : results.rows : authorResults ? authorResults : []);\n    res.end();\n  } catch (e) {\n    console.log(e);\n  }\n}","map":{"version":3,"sources":["C:/Users/nicho/Code/Portfolio/mock_nexus/pages/api/search.js"],"names":["queryDB","req","res","results","query","value","authorArticleIDs","body","authorResults","console","log","JSON","stringify","rows","json","end","e"],"mappings":"AAAA,SAASA,OAAT,QAAwB,UAAxB;AAEA,eAAe,gBAAeC,GAAf,EAAoBC,GAApB,EAAyB;AACpC,MAAI;AACA,UAAMC,OAAO,GAAG,MAAMH,OAAO,CACxB;;;;;;;;;;;;;;;;;;gDAkBmCC,GAAG,CAACG,KAAJ,CAAUC,KAAM;yDACPJ,GAAG,CAACG,KAAJ,CAAUC,KAAM;sDACnBJ,GAAG,CAACG,KAAJ,CAAUC,KAAM;yDACbJ,GAAG,CAACG,KAAJ,CAAUC,KAAM;qDACpBJ,GAAG,CAACG,KAAJ,CAAUC,KAAM,KAvBhC,CAA7B;AAwBA,UAAMC,gBAAgB,GAAG,MAAMN,OAAO,CAAE,+DAA8DC,GAAG,CAACM,IAAJ,CAASF,KAAM,KAA/E,CAAtC;AACA,UAAMG,aAAa,GAAG,MAAMR,OAAO,CAAC,2CAAD,EAA8C,CAACM,gBAAD,CAA9C,CAAnC;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeT,OAAO,CAACU,IAAvB,CAAZ;AACAX,IAAAA,GAAG,CAACY,IAAJ,CAASX,OAAO,GAAGK,aAAa,GAAG,CAAC,GAAGL,OAAO,CAACU,IAAZ,EAAkB,GAAGL,aAArB,CAAH,GAAyCL,OAAO,CAACU,IAAjE,GAAwEL,aAAa,GAAGA,aAAH,GAAmB,EAAxH;AACAN,IAAAA,GAAG,CAACa,GAAJ;AACH,GA9BD,CA8BE,OAAOC,CAAP,EAAU;AAAEP,IAAAA,OAAO,CAACC,GAAR,CAAYM,CAAZ;AAAgB;AACjC","sourcesContent":["import { queryDB } from \"../../db\"\r\n\r\nexport default async function(req, res) {\r\n    try {\r\n        const results = await queryDB(\r\n            `SELECT * FROM\r\n                (SELECT DISTINCT ON\r\n                    (id) id,\r\n                    title,\r\n                    category,\r\n                    subcategory,\r\n                    publish_date,\r\n                    full_thumbnail,\r\n                    mobile_thumbnail,\r\n                    description,\r\n                    content,\r\n                    src_url,\r\n                    author,\r\n                    related,\r\n                    comments,\r\n                    followers\r\n                FROM articles) x\r\n                WHERE\r\n                    LOWER(title) LIKE LOWER('%${req.query.value}%')\r\n                    OR LOWER(description) LIKE LOWER('%${req.query.value}%')\r\n                    OR LOWER(category) LIKE LOWER('%${req.query.value}%')\r\n                    OR LOWER(subcategory) LIKE LOWER('%${req.query.value}%')\r\n                    OR LOWER(content) LIKE LOWER('%${req.query.value}%')`);\r\n        const authorArticleIDs = await queryDB(`SELECT articles FROM authors WHERE LOWER(name) LIKE LOWER('%${req.body.value}%')`);\r\n        const authorResults = await queryDB('SELECT * FROM articles WHERE id = ANY($1)', [authorArticleIDs]);\r\n        console.log(JSON.stringify(results.rows));\r\n        res.json(results ? authorResults ? [...results.rows, ...authorResults] : results.rows : authorResults ? authorResults : []);\r\n        res.end();\r\n    } catch (e) { console.log(e) }\r\n}"]},"metadata":{},"sourceType":"module"}