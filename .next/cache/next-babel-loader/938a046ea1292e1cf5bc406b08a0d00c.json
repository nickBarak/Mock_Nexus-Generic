{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nicho\\\\code\\\\portfolio\\\\mock_nexus\\\\pages\\\\categories\\\\[category]\\\\[subcategory].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { queryDB, getCategories } from '../../../db';\nimport ArticleDisplay from '../../../components/ArticleDisplay';\nimport Layout from '../../../layouts';\nexport async function getStaticPaths() {\n  let categories = await queryDB(\"SELECT title, subcategories FROM categories WHERE title <> 'Labyrinth' AND title <> 'Headlines'\"),\n      paths = categories.reduce((acc, category) => [...acc, ...Object.keys(category.subcategories).map(subcategory => ({\n    params: {\n      category: category.title.toLowerCase().replace(/ /g, '-'),\n      subcategory: subcategory.toLowerCase().replace(/ /g, '-')\n    }\n  }))], []);\n  return JSON.parse(JSON.stringify({\n    paths,\n    fallback: false\n  }));\n}\nexport async function getStaticProps({\n  params: {\n    category,\n    subcategory\n  }\n}) {\n  let [title, subTitle] = [category, subcategory].map(param => param.split('-').map((word, i) => i === 0 || !['the', 'on'].includes(word) ? word[0].toUpperCase() + word.slice(1) : word).join(' ')),\n      subcategories = await queryDB('SELECT subcategories FROM categories WHERE title = $1', [title]),\n      articles = await queryDB('SELECT * FROM articles WHERE id = ANY($1)', [subcategories[0].subcategories[subTitle]]);\n  return {\n    props: JSON.parse(JSON.stringify({\n      heading: subTitle,\n      articles,\n      categories: await getCategories()\n    }))\n  };\n}\nexport default (({\n  heading,\n  articles,\n  categories\n}) => __jsx(Layout, {\n  categories: categories,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 55\n  }\n}, \" \", __jsx(ArticleDisplay, {\n  type: 'subcategory',\n  heading: heading,\n  articles: articles,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 88\n  }\n}), \" \"));","map":{"version":3,"sources":["C:/Users/nicho/code/portfolio/mock_nexus/pages/categories/[category]/[subcategory].js"],"names":["queryDB","getCategories","ArticleDisplay","Layout","getStaticPaths","categories","paths","reduce","acc","category","Object","keys","subcategories","map","subcategory","params","title","toLowerCase","replace","JSON","parse","stringify","fallback","getStaticProps","subTitle","param","split","word","i","includes","toUpperCase","slice","join","articles","props","heading"],"mappings":";;;AAAA,SAASA,OAAT,EAAkBC,aAAlB,QAAuC,aAAvC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AAEA,OAAO,eAAeC,cAAf,GAAgC;AACnC,MAAIC,UAAU,GAAG,MAAML,OAAO,CAAC,iGAAD,CAA9B;AAAA,MACIM,KAAK,GAAGD,UAAU,CACbE,MADG,CACI,CAACC,GAAD,EAAMC,QAAN,KAAmB,CACvB,GAAGD,GADoB,EAEvB,GAAGE,MAAM,CAACC,IAAP,CAAYF,QAAQ,CAACG,aAArB,EACEC,GADF,CACMC,WAAW,KAAK;AAAEC,IAAAA,MAAM,EAAE;AAAEN,MAAAA,QAAQ,EAAEA,QAAQ,CAACO,KAAT,CAAeC,WAAf,GAA6BC,OAA7B,CAAqC,IAArC,EAA2C,GAA3C,CAAZ;AAA6DJ,MAAAA,WAAW,EAAEA,WAAW,CAACG,WAAZ,GAA0BC,OAA1B,CAAkC,IAAlC,EAAwC,GAAxC;AAA1E;AAAV,GAAL,CADjB,CAFoB,CADvB,EAKD,EALC,CADZ;AAQA,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe;AAAEf,IAAAA,KAAF;AAASgB,IAAAA,QAAQ,EAAE;AAAnB,GAAf,CAAX,CAAP;AACH;AAED,OAAO,eAAeC,cAAf,CAA8B;AAAER,EAAAA,MAAM,EAAE;AAAEN,IAAAA,QAAF;AAAYK,IAAAA;AAAZ;AAAV,CAA9B,EAAqE;AACxE,MAAI,CAACE,KAAD,EAAQQ,QAAR,IAAoB,CAACf,QAAD,EAAWK,WAAX,EAAwBD,GAAxB,CAA4BY,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBb,GAAjB,CAAqB,CAACc,IAAD,EAAOC,CAAP,KAAcA,CAAC,KAAK,CAAN,IAAW,CAAC,CAAC,KAAD,EAAQ,IAAR,EAAcC,QAAd,CAAuBF,IAAvB,CAAb,GAA6CA,IAAI,CAAC,CAAD,CAAJ,CAAQG,WAAR,KAAwBH,IAAI,CAACI,KAAL,CAAW,CAAX,CAArE,GAAqFJ,IAAvH,EAA6HK,IAA7H,CAAkI,GAAlI,CAArC,CAAxB;AAAA,MACIpB,aAAa,GAAG,MAAMZ,OAAO,CAAC,uDAAD,EAA0D,CAACgB,KAAD,CAA1D,CADjC;AAAA,MAEIiB,QAAQ,GAAG,MAAMjC,OAAO,CAAC,2CAAD,EAA8C,CAAEY,aAAa,CAAC,CAAD,CAAb,CAAiBA,aAAjB,CAA+BY,QAA/B,CAAF,CAA9C,CAF5B;AAIA,SAAO;AACHU,IAAAA,KAAK,EAAEf,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe;AAC7Bc,MAAAA,OAAO,EAAEX,QADoB;AAE7BS,MAAAA,QAF6B;AAG7B5B,MAAAA,UAAU,EAAE,MAAMJ,aAAa;AAHF,KAAf,CAAX;AADJ,GAAP;AAOH;AAED,gBAAe,CAAC;AAAEkC,EAAAA,OAAF;AAAWF,EAAAA,QAAX;AAAqB5B,EAAAA;AAArB,CAAD,KAAuC,MAAC,MAAD;AAAQ,EAAA,UAAU,EAAEA,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAiC,MAAC,cAAD;AAAgB,EAAA,IAAI,EAAE,aAAtB;AAAqC,EAAA,OAAO,EAAE8B,OAA9C;AAAuD,EAAA,QAAQ,EAAEF,QAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAjC,MAAtD","sourcesContent":["import { queryDB, getCategories } from '../../../db';\r\nimport ArticleDisplay from '../../../components/ArticleDisplay';\r\nimport Layout from '../../../layouts';\r\n\r\nexport async function getStaticPaths() {\r\n    let categories = await queryDB(\"SELECT title, subcategories FROM categories WHERE title <> 'Labyrinth' AND title <> 'Headlines'\"),\r\n        paths = categories\r\n            .reduce((acc, category) => [\r\n                ...acc,\r\n                ...Object.keys(category.subcategories)\r\n                    .map(subcategory => ({ params: { category: category.title.toLowerCase().replace(/ /g, '-'), subcategory: subcategory.toLowerCase().replace(/ /g, '-') } }))\r\n            ], []);\r\n\r\n    return JSON.parse(JSON.stringify({ paths, fallback: false }))\r\n}\r\n\r\nexport async function getStaticProps({ params: { category, subcategory } }) {\r\n    let [title, subTitle] = [category, subcategory].map(param => param.split('-').map((word, i) => (i === 0 || !['the', 'on'].includes(word)) ? word[0].toUpperCase() + word.slice(1) : word).join(' ')),\r\n        subcategories = await queryDB('SELECT subcategories FROM categories WHERE title = $1', [title]),\r\n        articles = await queryDB('SELECT * FROM articles WHERE id = ANY($1)', [ subcategories[0].subcategories[subTitle] ]);\r\n\r\n    return {\r\n        props: JSON.parse(JSON.stringify({\r\n            heading: subTitle,\r\n            articles,\r\n            categories: await getCategories()\r\n        }))\r\n    }\r\n}\r\n\r\nexport default ({ heading, articles, categories }) => <Layout categories={categories}> <ArticleDisplay type={'subcategory'} heading={heading} articles={articles} /> </Layout>"]},"metadata":{},"sourceType":"module"}