{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport ArticleDisplay from '../../../../components/ArticleDisplay';\nimport Layout from '../../../../layouts';\nimport { convertToPath, convertFromPath } from '../../../../Functions';\nexport async function getStaticPaths() {\n  const {\n    queryDB\n  } = import('../../../../db');\n  let categories = await queryDB(\"SELECT title, articles FROM categories WHERE title <> 'Labyrinth' AND title <> 'Headlines'\"),\n      paths = categories.map(({\n    title,\n    articles\n  }) => new Array(Math.ceil(articles.length / 15)).fill(true).map((_, i) => ({\n    params: {\n      category: convertToPath(title),\n      page: String(i + 1)\n    }\n  })));\n  paths = paths.reduce((acc, cur) => [...cur, ...acc], []);\n  console.log(JSON.stringify(paths));\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps({\n  params: {\n    category,\n    page\n  }\n}) {\n  const {\n    queryDB,\n    getCategories\n  } = import('../../../../db');\n  let [articleIDs] = await queryDB('SELECT articles FROM categories WHERE title = $1', [convertFromPath(category)]),\n      articles = await queryDB('SELECT * FROM articles WHERE id = ANY($1) ORDER BY publish_date DESC', [articleIDs.articles]);\n  return {\n    props: JSON.parse(JSON.stringify({\n      heading: convertFromPath(category),\n      articles,\n      categories: await getCategories(),\n      footerData: {\n        route: '/categories/' + category,\n        page: Number(page),\n        highestPage: Math.ceil(articles.length / 15)\n      }\n    }))\n  };\n}\n\nfunction Category({\n  heading,\n  articles,\n  categories,\n  footerData\n}) {\n  return __jsx(Layout, {\n    categories: categories,\n    footerData: footerData\n  }, __jsx(ArticleDisplay, {\n    type: \"category\",\n    heading: heading,\n    articles: articles,\n    page: footerData.page\n  }));\n}\n\nexport default Category;","map":null,"metadata":{},"sourceType":"module"}