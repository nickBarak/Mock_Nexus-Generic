{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst fs = require('fs');\n\nrequire('dotenv').config();\n\nimport { Pool } from 'pg';\n\nif (!pool) {\n  var pool = new Pool({\n    connectionString: process.env.DATABASE_URL,\n    idleTimeoutMillis: 0\n  });\n  pool ? console.log('Connected to PostgreSQL') : console.log('Failed to connect to database');\n}\n\nexport async function queryDB(query, params = []) {\n  try {\n    var client = await pool.connect(),\n        {\n      rows\n    } = await client.query(query, params);\n  } catch (e) {\n    console.log(e);\n  } finally {\n    client.release();\n  }\n\n  return rows;\n}\nexport async function getCategories() {\n  let categories = await queryDB(\"SELECT * FROM categories WHERE title <> 'Headlines' AND title <> 'Labyrinth' ORDER BY title\");\n\n  for (let category of categories) {\n    for (let id of category.articles) {\n      let hydratedArticle = await queryDB(\"SELECT * FROM articles WHERE id = $1\", [id]);\n      category.articles.splice(category.articles.indexOf(id), 1, hydratedArticle[0]);\n    }\n  }\n\n  return categories.map(category => _objectSpread(_objectSpread({}, category), {}, {\n    articles: category.articles.sort(({\n      publish_date: a\n    }, {\n      publish_date: b\n    }) => b - a)\n  }));\n}\nexport async function insertUser(name, email) {\n  await queryDB('INSERT INTO users (name, email, comments, following) VALUES ($1, $2, $3, $4)', [name, email, [], []]);\n}\nexport async function getUser(email) {\n  let [user] = await queryDB('SELECT * FROM users WHERE email = $1', [email]);\n  return user;\n}\nexport default pool;","map":null,"metadata":{},"sourceType":"module"}