{"ast":null,"code":"import 'isomorphic-unfetch';\nexport function convertDate(date) {\n  let now = new Date(),\n      secondsPast = (now.getTime() - date) / 1000;\n\n  if (secondsPast < 60) {\n    return parseInt(secondsPast) + ` second${parseInt(secondsPast) > 1 ? 's' : ''} ago`;\n  }\n\n  if (secondsPast < 3600) {\n    return parseInt(secondsPast / 60) + ` minute${parseInt(secondsPast / 60) > 1 ? 's' : ''} ago`;\n  }\n\n  if (secondsPast <= 86400) {\n    return parseInt(secondsPast / 3600) + ` hour${parseInt(secondsPast / 3600) > 1 ? 's' : ''} ago`;\n  }\n\n  return new Date(date).toLocaleDateString('default', {\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric'\n  });\n}\nexport function convertToPath(string) {\n  return string.toLowerCase().replace(/ /g, '-').replace(/[:'!@#$%^&*\\(\\)\";{}\\[\\]\\|~`<>\\/\\\\?\\.,]/g, '');\n}\nexport function convertFromPath(path) {\n  return path.split('-').map((word, i) => i === 0 || !['the', 'on'].includes(word) ? word[0].toUpperCase() + word.slice(1) : word).join(' ');\n}\nexport function testEmail(email) {\n  return /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/.test(email);\n}\nexport async function postComment(e, setMessage, article_id, parent = null) {\n  e.persist();\n  const [content, name, email] = [0, 1, 2].map(i => e.target.children[i].children[1].value);\n\n  if (!content || !name || !email) {\n    return setMessage('There is an empty field');\n  }\n\n  let response = await fetch('http://localhost:3000/api/post-comment', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      article_id,\n      name,\n      email,\n      content,\n      parent,\n      post_date: Date.now()\n    })\n  });\n  let status = await response.json(),\n      msg;\n\n  switch (status) {\n    case 0:\n      setMessage('');\n      break;\n\n    case 1:\n      msg = 'Invalid email address';\n      break;\n\n    case 2:\n      msg = 'This email is registered with a different name';\n      break;\n\n    case 3:\n      msg = 'New user created';\n      break;\n\n    default:\n      console.log(status);\n  }\n\n  msg && setMessage(msg);\n  (!status || status === 3) && !sessionStorage.getItem('email') || sessionStorage.setItem('email', email) || sessionStorage.setItem('name', name);\n  e.target.reset();\n}\nexport async function getCategories() {\n  let response = await fetch('http://localhost:3000/api/get-categories');\n  return await response.json();\n}\nexport async function insertUser(name, email) {\n  fetch('http://localhost:3000/api/insert-user', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name,\n      email\n    })\n  });\n}\nexport async function getUser(email) {\n  let response = await fetch('http://localhost:3000/api/get-user?email=' + email);\n  return await response.json();\n}\nexport async function queryDB(query, params = []) {\n  let response = await fetch('http://127.0.0.1:3000/api/query-db', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query,\n      params\n    })\n  });\n  console.log(await response.text());\n  return [];\n  return await response.json();\n}","map":null,"metadata":{},"sourceType":"module"}