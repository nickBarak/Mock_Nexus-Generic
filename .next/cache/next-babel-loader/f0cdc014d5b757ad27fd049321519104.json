{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Link from 'next/link';\nimport AboutTheAuthor from '../../components/AboutTheAuthor';\nimport Related from '../../components/Related';\nimport CommentSection from '../../components/CommentSection';\nimport { queryDB } from '../../Functions';\n\nfunction Article({\n  article,\n  author\n}) {\n  return __jsx(\"div\", {\n    className: \"article\"\n  }, __jsx(\"div\", null, article.category), __jsx(\"div\", null, article.title), __jsx(\"div\", null, article.publish_date, \" by \", __jsx(Link, {\n    to: `/authors/${author.id}`\n  }, author.name)), __jsx(\"div\", null, article.content), __jsx(AboutTheAuthor, {\n    author: author\n  }), __jsx(Related, {\n    articles: related\n  }), __jsx(CommentSection, null));\n}\n\nexport async function getStaticPaths() {\n  let ids = await queryDB('SELECT id FROM articles'),\n      paths = ids.map(id => ({\n    params: {\n      id: String(id.id)\n    }\n  }));\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps({\n  params: {\n    id\n  }\n}) {\n  let article = await queryDB('SELECT * FROM articles WHERE id = $1', [id]),\n      related = await queryDB('SELECT * FROM articles WHERE id = ANY($1)', [article.related]),\n      author = await queryDB('SELECT * FROM authors WHERE name = $1', [article.author]);\n  return {\n    props: {\n      article: _objectSpread(_objectSpread({}, article), {}, {\n        publish_date: JSON.stringify(article.publish_date)\n      }),\n      author,\n      related\n    }\n  };\n}\nexport default Article;","map":null,"metadata":{},"sourceType":"module"}