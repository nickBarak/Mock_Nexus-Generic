{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport pool from '../../db';\nimport uuid from 'uuidv4';\nexport default async function (req, res) {\n  let newUser,\n      {\n    name,\n    email,\n    content,\n    articleID,\n    parent\n  } = req.body;\n\n  if (!/(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/.test(email)) {\n    res.json(1);\n    res.end();\n  }\n\n  let hydratedComment = {\n    article_id: articleID,\n    content,\n    post_date: Date.now(),\n    parent,\n    replies: [],\n    id: uuid()\n  };\n\n  try {\n    var client = await pool.connect(),\n        {\n      rows\n    } = await client.query('SELECT * FROM users WHERE email = $1', [email]),\n        [user] = rows;\n\n    if (user) {\n      if (user.name !== name) {\n        res.json(2);\n        res.end();\n      }\n\n      await client.query('UPDATE users SET comments = array_append(comments, $1) WHERE email = $2', [hydratedComment, email]);\n    } else {\n      newUser = true;\n      await client.query('INSERT INTO users (name, email, comments) VALUES ($1, $2, $3)', [name, email, []]);\n    }\n\n    if (parent) {\n      let comments = await client.query('SELECT comments FROM articles WHERE id = $1', [articleID]);\n\n      function editReplies(level) {\n        return level.map((comment, {\n          replies\n        }) => replies.find(({\n          id\n        }) => id === parent) ? _objectSpread(_objectSpread({}, comment), {}, {\n          replies: [...replies.filter(({\n            id\n          }) => id !== parent), hydratedComment]\n        }) : replies.length ? editReplies(level) : comment);\n      }\n\n      await client.query('UPDATE articles SET comments = $1 WHERE id = $2', [editReplies(comments), articleID]);\n    } else await client.query('UPDATE articles SET comments = array_append(comments, $1) WHERE id = $2', [_objectSpread({\n      name,\n      email\n    }, hydratedComment), articleID]);\n\n    if (newUser) {\n      res.json(3);\n      res.end();\n    }\n\n    res.json(0);\n    res.end();\n  } catch (e) {\n    console.log(e);\n  } finally {\n    client.release();\n  }\n}","map":{"version":3,"sources":["C:/Users/nicho/Code/Portfolio/mock_nexus/pages/api/post-comment.js"],"names":["pool","uuid","req","res","newUser","name","email","content","articleID","parent","body","test","json","end","hydratedComment","article_id","post_date","Date","now","replies","id","client","connect","rows","query","user","comments","editReplies","level","map","comment","find","filter","length","e","console","log","release"],"mappings":"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","sourcesContent":["import pool from '../../db';\r\nimport uuid from 'uuidv4';\r\n\r\nexport default async function(req, res) {\r\n    let newUser,\r\n        { name, email, content, articleID, parent } = req.body;\r\n    if (!/(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/.test(email)) {\r\n        res.json(1)\r\n        res.end();\r\n    }\r\n    let hydratedComment = { article_id: articleID, content, post_date: Date.now(), parent, replies: [], id: uuid() };\r\n    try {\r\n        var client = await pool.connect(),\r\n            { rows } = await client.query('SELECT * FROM users WHERE email = $1', [email]),\r\n            [user] = rows;\r\n        if (user) {\r\n            if (user.name !== name) { res.json(2); res.end() }\r\n            await client.query('UPDATE users SET comments = array_append(comments, $1) WHERE email = $2', [hydratedComment, email]);\r\n        } else {\r\n            newUser = true;\r\n            await client.query('INSERT INTO users (name, email, comments) VALUES ($1, $2, $3)', [name, email, []]);\r\n        }\r\n        if (parent) {\r\n            let comments = await client.query('SELECT comments FROM articles WHERE id = $1', [articleID]);\r\n            function editReplies(level) {\r\n                return level.map((comment, {replies}) =>\r\n                    replies.find(({id}) => id === parent)\r\n                        ? ({ ...comment, replies: [...replies.filter(({id}) => id !== parent), hydratedComment] })\r\n                        : replies.length\r\n                            ? editReplies(level)\r\n                            : comment);\r\n            }\r\n            await client.query('UPDATE articles SET comments = $1 WHERE id = $2', [editReplies(comments), articleID]);\r\n        } else await client.query('UPDATE articles SET comments = array_append(comments, $1) WHERE id = $2', [{name, email, ...hydratedComment}, articleID]);\r\n        if (newUser) { res.json(3); res.end(); }\r\n        res.json(0);\r\n        res.end();\r\n    } catch (e) { console.log(e) }\r\n    finally { client.release() }\r\n}"]},"metadata":{},"sourceType":"module"}