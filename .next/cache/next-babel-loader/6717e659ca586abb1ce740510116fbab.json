{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport 'isomorphic-unfetch';\nexport function convertDate(date) {\n  var now = new Date(),\n      secondsPast = (now.getTime() - date) / 1000;\n\n  if (secondsPast < 60) {\n    return parseInt(secondsPast) + \" second\".concat(parseInt(secondsPast) > 1 ? 's' : '', \" ago\");\n  }\n\n  if (secondsPast < 3600) {\n    return parseInt(secondsPast / 60) + \" minute\".concat(parseInt(secondsPast / 60) > 1 ? 's' : '', \" ago\");\n  }\n\n  if (secondsPast <= 86400) {\n    return parseInt(secondsPast / 3600) + \" hour\".concat(parseInt(secondsPast / 3600) > 1 ? 's' : '', \" ago\");\n  }\n\n  return new Date(date).toLocaleDateString('default', {\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric'\n  });\n}\nexport function convertToPath(string) {\n  return string.toLowerCase().replace(/ /g, '-').replace(/[:'!@#$%^&*\\(\\)\";{}\\[\\]\\|~`<>\\/\\\\?\\.,]/g, '');\n}\nexport function convertFromPath(path) {\n  return path.split('-').map(function (word, i) {\n    return i === 0 || !['the', 'on'].includes(word) ? word[0].toUpperCase() + word.slice(1) : word;\n  }).join(' ');\n}\nexport function testEmail(email) {\n  return /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/.test(email);\n}\nexport function postComment(_x, _x2, _x3) {\n  return _postComment.apply(this, arguments);\n}\n\nfunction _postComment() {\n  _postComment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e, setMessage, article_id) {\n    var parent,\n        _map,\n        _map2,\n        content,\n        name,\n        email,\n        response,\n        status,\n        msg,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            parent = _args.length > 3 && _args[3] !== undefined ? _args[3] : null;\n            e.persist();\n            _map = [0, 1, 2].map(function (i) {\n              return e.target.children[i].children[1].value;\n            }), _map2 = _slicedToArray(_map, 3), content = _map2[0], name = _map2[1], email = _map2[2];\n\n            if (!(!content || !name || !email)) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\", setMessage('There is an empty field'));\n\n          case 5:\n            _context.next = 7;\n            return fetch('http://localhost:3000/api/post-comment', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                article_id: article_id,\n                name: name,\n                email: email,\n                content: content,\n                parent: parent,\n                post_date: Date.now()\n              })\n            });\n\n          case 7:\n            response = _context.sent;\n            _context.next = 10;\n            return response.json();\n\n          case 10:\n            status = _context.sent;\n            _context.t0 = status;\n            _context.next = _context.t0 === 0 ? 14 : _context.t0 === 1 ? 16 : _context.t0 === 2 ? 18 : _context.t0 === 3 ? 20 : 22;\n            break;\n\n          case 14:\n            setMessage('');\n            return _context.abrupt(\"break\", 23);\n\n          case 16:\n            msg = 'Invalid email address';\n            return _context.abrupt(\"break\", 23);\n\n          case 18:\n            msg = 'This email is registered with a different name';\n            return _context.abrupt(\"break\", 23);\n\n          case 20:\n            msg = 'New user created';\n            return _context.abrupt(\"break\", 23);\n\n          case 22:\n            console.log(status);\n\n          case 23:\n            msg && setMessage(msg);\n            (!status || status === 3) && !sessionStorage.getItem('email') || sessionStorage.setItem('email', email) || sessionStorage.setItem('name', name);\n            e.target.reset();\n\n          case 26:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _postComment.apply(this, arguments);\n}\n\nexport function getCategories() {\n  return _getCategories.apply(this, arguments);\n}\n\nfunction _getCategories() {\n  _getCategories = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetch('http://localhost:3000/api/get-categories');\n\n          case 2:\n            response = _context2.sent;\n            _context2.next = 5;\n            return response.json();\n\n          case 5:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getCategories.apply(this, arguments);\n}\n\nexport function insertUser(_x4, _x5) {\n  return _insertUser.apply(this, arguments);\n}\n\nfunction _insertUser() {\n  _insertUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(name, email) {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            fetch('http://localhost:3000/api/insert-user', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                name: name,\n                email: email\n              })\n            });\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _insertUser.apply(this, arguments);\n}\n\nexport function getUser(_x6) {\n  return _getUser.apply(this, arguments);\n}\n\nfunction _getUser() {\n  _getUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(email) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return fetch('http://localhost:3000/api/get-user?email=' + email);\n\n          case 2:\n            response = _context4.sent;\n            _context4.next = 5;\n            return response.json();\n\n          case 5:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 6:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _getUser.apply(this, arguments);\n}\n\nexport function queryDB(_x7) {\n  return _queryDB.apply(this, arguments);\n}\n\nfunction _queryDB() {\n  _queryDB = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(query) {\n    var params,\n        response,\n        _args5 = arguments;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            params = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : [];\n            _context5.next = 3;\n            return fetch('http://127.0.0.1:3000/api/query-db', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                query: query,\n                params: params\n              })\n            });\n\n          case 3:\n            response = _context5.sent;\n            _context5.t0 = console;\n            _context5.next = 7;\n            return response.text();\n\n          case 7:\n            _context5.t1 = _context5.sent;\n\n            _context5.t0.log.call(_context5.t0, _context5.t1);\n\n            return _context5.abrupt(\"return\", []);\n\n          case 12:\n            return _context5.abrupt(\"return\", _context5.sent);\n\n          case 13:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _queryDB.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}