{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { config } from 'dotenv';\nimport { Pool } from 'pg';\nconfig();\nexport async function queryDB(query, params = []) {\n  try {\n    while (pool.totalCount > 199) setTimeout(_ => {}, 100);\n\n    var client = await spawnPool().connect(),\n        {\n      rows\n    } = await client.query(query, params);\n  } catch (e) {\n    console.log(e);\n  } finally {\n    client && client.release();\n  }\n\n  return rows;\n}\nexport async function getCategories() {\n  let categories = await queryDB(\"SELECT * FROM categories WHERE title <> 'Headlines' AND title <> 'Labyrinth' ORDER BY title\");\n\n  for (let category of categories) {\n    for (let id of category.articles) {\n      let hydratedArticle = await queryDB(\"SELECT * FROM articles WHERE id = $1\", [id]);\n      category.articles.splice(category.articles.indexOf(id), 1, hydratedArticle[0]);\n    }\n  }\n\n  return categories.map(category => _objectSpread(_objectSpread({}, category), {}, {\n    articles: category.articles.sort(({\n      publish_date: a\n    }, {\n      publish_date: b\n    }) => b - a)\n  }));\n}\nexport async function insertUser(name, email) {\n  await queryDB('INSERT INTO users (name, email, comments, following) VALUES ($1, $2, $3, $4)', [name, email, [], []]);\n}\nexport async function getUser(email) {\n  let [user] = await queryDB('SELECT * FROM users WHERE email = $1', [email]);\n  return user;\n}\n\nfunction spawnPool() {\n  if (!pool) {\n    var pool = new Pool({\n      max: 200,\n      connectionString: process.env.DATABASE_URL,\n      idleTimeoutMillis: 0\n    });\n    pool ? console.log('Connected to PostgreSQL') : console.log('Failed to connect to database');\n  }\n\n  return pool;\n}","map":{"version":3,"sources":["C:/Users/nicho/Code/Portfolio/mock_nexus/db.js"],"names":["config","Pool","queryDB","query","params","pool","totalCount","setTimeout","_","client","spawnPool","connect","rows","e","console","log","release","getCategories","categories","category","id","articles","hydratedArticle","splice","indexOf","map","sort","publish_date","a","b","insertUser","name","email","getUser","user","max","connectionString","process","env","DATABASE_URL","idleTimeoutMillis"],"mappings":";;;;;;AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,IAAT,QAAqB,IAArB;AACAD,MAAM;AAEN,OAAO,eAAeE,OAAf,CAAuBC,KAAvB,EAA8BC,MAAM,GAAC,EAArC,EAAyC;AAC5C,MAAI;AACA,WAAMC,IAAI,CAACC,UAAL,GAAkB,GAAxB,EAA6BC,UAAU,CAACC,CAAC,IAAE,CAAE,CAAN,EAAQ,GAAR,CAAV;;AAC7B,QAAIC,MAAM,GAAG,MAAMC,SAAS,GAAGC,OAAZ,EAAnB;AAAA,QACI;AAAEC,MAAAA;AAAF,QAAW,MAAMH,MAAM,CAACN,KAAP,CAAaA,KAAb,EAAoBC,MAApB,CADrB;AAEH,GAJD,CAIE,OAAOS,CAAP,EAAU;AAAEC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AAAgB,GAJ9B,SAKQ;AAAEJ,IAAAA,MAAM,IAAIA,MAAM,CAACO,OAAP,EAAV;AAA4B;;AACtC,SAAOJ,IAAP;AACH;AAED,OAAO,eAAeK,aAAf,GAA+B;AAClC,MAAIC,UAAU,GAAG,MAAMhB,OAAO,CAAC,6FAAD,CAA9B;;AAEA,OAAK,IAAIiB,QAAT,IAAqBD,UAArB,EAAiC;AAC7B,SAAK,IAAIE,EAAT,IAAeD,QAAQ,CAACE,QAAxB,EAAkC;AAC9B,UAAIC,eAAe,GAAG,MAAMpB,OAAO,CAAC,sCAAD,EAAyC,CAACkB,EAAD,CAAzC,CAAnC;AACAD,MAAAA,QAAQ,CAACE,QAAT,CAAkBE,MAAlB,CAAyBJ,QAAQ,CAACE,QAAT,CAAkBG,OAAlB,CAA0BJ,EAA1B,CAAzB,EAAwD,CAAxD,EAA2DE,eAAe,CAAC,CAAD,CAA1E;AACH;AACJ;;AAED,SAAOJ,UAAU,CAACO,GAAX,CAAeN,QAAQ,oCAAUA,QAAV;AAAoBE,IAAAA,QAAQ,EAAEF,QAAQ,CAACE,QAAT,CAAkBK,IAAlB,CAAuB,CAAC;AAACC,MAAAA,YAAY,EAAEC;AAAf,KAAD,EAAoB;AAACD,MAAAA,YAAY,EAAEE;AAAf,KAApB,KAA0CA,CAAC,GAACD,CAAnE;AAA9B,IAAvB,CAAP;AACH;AAED,OAAO,eAAeE,UAAf,CAA0BC,IAA1B,EAAgCC,KAAhC,EAAuC;AAC1C,QAAM9B,OAAO,CAAC,8EAAD,EAAiF,CAAC6B,IAAD,EAAOC,KAAP,EAAc,EAAd,EAAkB,EAAlB,CAAjF,CAAb;AACH;AAED,OAAO,eAAeC,OAAf,CAAuBD,KAAvB,EAA8B;AAClC,MAAI,CAACE,IAAD,IAAS,MAAMhC,OAAO,CAAC,sCAAD,EAAyC,CAAC8B,KAAD,CAAzC,CAA1B;AACC,SAAOE,IAAP;AACH;;AAED,SAASxB,SAAT,GAAqB;AACjB,MAAI,CAACL,IAAL,EAAW;AACP,QAAIA,IAAI,GAAG,IAAIJ,IAAJ,CAAS;AAChBkC,MAAAA,GAAG,EAAE,GADW;AAEhBC,MAAAA,gBAAgB,EAAEC,OAAO,CAACC,GAAR,CAAYC,YAFd;AAGhBC,MAAAA,iBAAiB,EAAE;AAHH,KAAT,CAAX;AAKAnC,IAAAA,IAAI,GACFS,OAAO,CAACC,GAAR,CAAY,yBAAZ,CADE,GAEFD,OAAO,CAACC,GAAR,CAAY,+BAAZ,CAFF;AAGH;;AACD,SAAOV,IAAP;AACH","sourcesContent":["import { config } from 'dotenv';\r\nimport { Pool } from 'pg';\r\nconfig();\r\n\r\nexport async function queryDB(query, params=[]) {\r\n    try {\r\n        while(pool.totalCount > 199) setTimeout(_=>{}, 100);\r\n        var client = await spawnPool().connect(),\r\n            { rows } = await client.query(query, params);\r\n    } catch (e) { console.log(e) }\r\n    finally { client && client.release() }\r\n    return rows;\r\n}\r\n\r\nexport async function getCategories() {\r\n    let categories = await queryDB(\"SELECT * FROM categories WHERE title <> 'Headlines' AND title <> 'Labyrinth' ORDER BY title\");\r\n\r\n    for (let category of categories) {\r\n        for (let id of category.articles) {\r\n            let hydratedArticle = await queryDB(\"SELECT * FROM articles WHERE id = $1\", [id]);\r\n            category.articles.splice(category.articles.indexOf(id), 1, hydratedArticle[0]);\r\n        }\r\n    }\r\n\r\n    return categories.map(category => ({ ...category, articles: category.articles.sort(({publish_date: a}, {publish_date: b}) => b-a) }));\r\n}\r\n\r\nexport async function insertUser(name, email) {\r\n    await queryDB('INSERT INTO users (name, email, comments, following) VALUES ($1, $2, $3, $4)', [name, email, [], []]);\r\n}\r\n\r\nexport async function getUser(email) {\r\n   let [user] = await queryDB('SELECT * FROM users WHERE email = $1', [email]);\r\n    return user;\r\n}\r\n\r\nfunction spawnPool() {\r\n    if (!pool) {\r\n        var pool = new Pool({\r\n            max: 200,\r\n            connectionString: process.env.DATABASE_URL,\r\n            idleTimeoutMillis: 0\r\n        });\r\n        pool\r\n        ? console.log('Connected to PostgreSQL')\r\n        : console.log('Failed to connect to database');\r\n    }\r\n    return pool;\r\n}"]},"metadata":{},"sourceType":"module"}