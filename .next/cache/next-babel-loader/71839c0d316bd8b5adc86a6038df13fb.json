{"ast":null,"code":"import 'isomorphic-unfetch';\nexport function convertDate(date) {\n  let now = new Date(),\n      secondsPast = (now.getTime() - date) / 1000;\n\n  if (secondsPast < 60) {\n    return parseInt(secondsPast) + ` second${parseInt(secondsPast) > 1 ? 's' : ''} ago`;\n  }\n\n  if (secondsPast < 3600) {\n    return parseInt(secondsPast / 60) + ` minute${parseInt(secondsPast / 60) > 1 ? 's' : ''} ago`;\n  }\n\n  if (secondsPast <= 86400) {\n    return parseInt(secondsPast / 3600) + ` hour${parseInt(secondsPast / 3600) > 1 ? 's' : ''} ago`;\n  }\n\n  return new Date(date).toLocaleDateString('default', {\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric'\n  });\n}\nexport function convertToPath(string) {\n  return string.toLowerCase().replace(/ /g, '-').replace(/[:'!@#$%^&*\\(\\)\";{}\\[\\]\\|~`<>\\/\\\\?\\.,]/g, '');\n}\nexport function convertFromPath(path) {\n  return path.split('-').map((word, i) => i === 0 || !['the', 'on'].includes(word) ? word[0].toUpperCase() + word.slice(1) : word).join(' ');\n}\nexport function testEmail(email) {\n  return /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/.test(email);\n}\nexport function copyToClipboard(text) {\n  const el = document.createElement('input');\n  el.value = text;\n  el.style.display = 'none';\n  document.body.appendChild(el);\n  el.select();\n  document.execCommand('copy');\n}\nexport async function getCategories() {\n  let response = await fetch('http://localhost:3000/api/get-categories');\n  return await response.json();\n}\nexport async function insertUser(name, email) {\n  fetch('http://localhost:3000/api/insert-user', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name,\n      email\n    })\n  });\n}\nexport async function getUser(email) {\n  let response = await fetch('http://localhost:3000/api/get-user?email=' + email);\n  return await response.json();\n}\nexport async function queryDB(query, params = []) {\n  let response = await fetch('http://127.0.0.1:3000/api/query-db', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query,\n      params\n    })\n  });\n  console.log(await response.text());\n  return [];\n  return await response.json();\n}","map":{"version":3,"sources":["C:/Users/nicho/Code/Portfolio/mock_nexus/Functions.js"],"names":["convertDate","date","now","Date","secondsPast","getTime","parseInt","toLocaleDateString","day","month","year","convertToPath","string","toLowerCase","replace","convertFromPath","path","split","map","word","i","includes","toUpperCase","slice","join","testEmail","email","test","copyToClipboard","text","el","document","createElement","value","style","display","body","appendChild","select","execCommand","getCategories","response","fetch","json","insertUser","name","method","headers","JSON","stringify","getUser","queryDB","query","params","console","log"],"mappings":"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","sourcesContent":["import 'isomorphic-unfetch';\r\n\r\nexport function convertDate(date) {\r\n    let now = new Date(),\r\n        secondsPast = (now.getTime() - date) / 1000;\r\n    if (secondsPast < 60) {\r\n        return parseInt(secondsPast) + ` second${parseInt(secondsPast) > 1 ? 's' : ''} ago`;\r\n    }\r\n    if (secondsPast < 3600) {\r\n        return parseInt(secondsPast / 60) + ` minute${parseInt(secondsPast / 60) > 1 ? 's' : ''} ago`;\r\n    }\r\n    if (secondsPast <= 86400) {\r\n        return parseInt(secondsPast / 3600) + ` hour${parseInt(secondsPast / 3600) > 1 ? 's' : ''} ago`;\r\n    }\r\n    return new Date(date).toLocaleDateString('default', { day: 'numeric', month: 'long', year: 'numeric' })\r\n}\r\n\r\nexport function convertToPath(string) {\r\n    return string.toLowerCase().replace(/ /g, '-').replace(/[:'!@#$%^&*\\(\\)\";{}\\[\\]\\|~`<>\\/\\\\?\\.,]/g, '')\r\n}\r\n\r\nexport function convertFromPath(path) {\r\n    return path.split('-').map((word, i) => (i === 0 || !['the', 'on'].includes(word)) ? word[0].toUpperCase() + word.slice(1) : word).join(' ')\r\n}\r\n\r\nexport function testEmail(email) {\r\n    return /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/.test(email)\r\n}\r\n\r\nexport function copyToClipboard(text) {\r\n    const el = document.createElement('input');\r\n    el.value = text;\r\n    el.style.display = 'none';\r\n    document.body.appendChild(el);\r\n    el.select();\r\n    document.execCommand('copy');\r\n}\r\n\r\nexport async function getCategories() {\r\n    let response = await fetch('http://localhost:3000/api/get-categories');\r\n    return await response.json();\r\n}\r\n\r\nexport async function insertUser(name, email) {\r\n    fetch('http://localhost:3000/api/insert-user', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n            name,\r\n            email\r\n        })\r\n    })\r\n}\r\n\r\nexport async function getUser(email) {\r\n    let response = await fetch('http://localhost:3000/api/get-user?email=' + email);\r\n    return await response.json();\r\n}\r\n\r\nexport async function queryDB(query, params=[]) {\r\n    let response = await fetch('http://127.0.0.1:3000/api/query-db', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n            query,\r\n            params\r\n        })\r\n    });\r\n    console.log(await response.text());\r\n    return [];\r\n    return await response.json()\r\n}"]},"metadata":{},"sourceType":"module"}