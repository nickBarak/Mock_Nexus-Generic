{"ast":null,"code":"import { config } from 'dotenv';\nimport { Pool } from 'pg';\nconfig();\n\nif (!pool) {\n  var pool = new Pool({\n    connectionString: process.env.DATABASE_URL\n  });\n  pool ? console.log('Connected to PostgreSQL') : console.log('Failed to connect to database');\n}\n\nexport async function queryDB(query, params = []) {\n  try {\n    await pool.connect();\n    var {\n      rows\n    } = await pool.query(query, params);\n  } catch (e) {\n    console.log(e);\n  } finally {\n    pool.release();\n  }\n\n  return rows;\n}\nexport async function getCategories() {\n  let categories = await queryDB(\"SELECT * FROM categories WHERE title <> 'Headlines' AND title <> 'Labyrinth'\");\n\n  for (let category of categories) {\n    for (let id of category.articles) {\n      let hydratedArticle = await queryDB(\"SELECT * FROM articles WHERE id = $1\", [id]);\n      category.articles.splice(category.articles.indexOf(id), 1, hydratedArticle[0]);\n    }\n  }\n\n  return categories;\n}","map":{"version":3,"sources":["C:/Users/nicho/code/portfolio/mock_nexus/db.js"],"names":["config","Pool","pool","connectionString","process","env","DATABASE_URL","console","log","queryDB","query","params","connect","rows","e","release","getCategories","categories","category","id","articles","hydratedArticle","splice","indexOf"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,IAAT,QAAqB,IAArB;AACAD,MAAM;;AAEN,IAAI,CAACE,IAAL,EAAW;AACP,MAAIA,IAAI,GAAG,IAAID,IAAJ,CAAS;AAAEE,IAAAA,gBAAgB,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAAhC,GAAT,CAAX;AACAJ,EAAAA,IAAI,GACEK,OAAO,CAACC,GAAR,CAAY,yBAAZ,CADF,GAEED,OAAO,CAACC,GAAR,CAAY,+BAAZ,CAFN;AAGH;;AAED,OAAO,eAAeC,OAAf,CAAuBC,KAAvB,EAA8BC,MAAM,GAAC,EAArC,EAAyC;AAC5C,MAAI;AACA,UAAMT,IAAI,CAACU,OAAL,EAAN;AACA,QAAI;AAAEC,MAAAA;AAAF,QAAW,MAAMX,IAAI,CAACQ,KAAL,CAAWA,KAAX,EAAkBC,MAAlB,CAArB;AACH,GAHD,CAGE,OAAOG,CAAP,EAAU;AAAEP,IAAAA,OAAO,CAACC,GAAR,CAAYM,CAAZ;AAAgB,GAH9B,SAIQ;AAAEZ,IAAAA,IAAI,CAACa,OAAL;AAAgB;;AAC1B,SAAOF,IAAP;AACH;AAED,OAAO,eAAeG,aAAf,GAA+B;AAClC,MAAIC,UAAU,GAAG,MAAMR,OAAO,CAAC,8EAAD,CAA9B;;AAEA,OAAK,IAAIS,QAAT,IAAqBD,UAArB,EAAiC;AAC7B,SAAK,IAAIE,EAAT,IAAeD,QAAQ,CAACE,QAAxB,EAAkC;AAC9B,UAAIC,eAAe,GAAG,MAAMZ,OAAO,CAAC,sCAAD,EAAyC,CAACU,EAAD,CAAzC,CAAnC;AACAD,MAAAA,QAAQ,CAACE,QAAT,CAAkBE,MAAlB,CAAyBJ,QAAQ,CAACE,QAAT,CAAkBG,OAAlB,CAA0BJ,EAA1B,CAAzB,EAAwD,CAAxD,EAA2DE,eAAe,CAAC,CAAD,CAA1E;AACH;AACJ;;AAED,SAAOJ,UAAP;AACH","sourcesContent":["import { config } from 'dotenv';\r\nimport { Pool } from 'pg';\r\nconfig();\r\n\r\nif (!pool) {\r\n    var pool = new Pool({ connectionString: process.env.DATABASE_URL });\r\n    pool\r\n        ? console.log('Connected to PostgreSQL')\r\n        : console.log('Failed to connect to database');\r\n}\r\n\r\nexport async function queryDB(query, params=[]) {\r\n    try {\r\n        await pool.connect();\r\n        var { rows } = await pool.query(query, params);\r\n    } catch (e) { console.log(e) }\r\n    finally { pool.release() }\r\n    return rows;\r\n}\r\n\r\nexport async function getCategories() {\r\n    let categories = await queryDB(\"SELECT * FROM categories WHERE title <> 'Headlines' AND title <> 'Labyrinth'\");\r\n\r\n    for (let category of categories) {\r\n        for (let id of category.articles) {\r\n            let hydratedArticle = await queryDB(\"SELECT * FROM articles WHERE id = $1\", [id]);\r\n            category.articles.splice(category.articles.indexOf(id), 1, hydratedArticle[0]);\r\n        }\r\n    }\r\n\r\n    return categories;\r\n}"]},"metadata":{},"sourceType":"module"}