{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nicho\\\\Code\\\\Portfolio\\\\mock_nexus\\\\pages\\\\categories\\\\[category].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { queryDB, getCategories } from '../../db';\nimport ArticleDisplay from '../../components/ArticleDisplay';\nimport Layout from '../../layouts';\nimport { convertToPath, convertFromPath } from '../../Functions';\nexport async function getStaticPaths() {\n  let categories = await queryDB(\"SELECT title, articles FROM categories WHERE title <> 'Labyrinth'\"),\n      paths = categories.map(({\n    title\n  }) => ({\n    params: {\n      category: convertToPath(title)\n    }\n  }));\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps({\n  params: {\n    category\n  }\n}) {\n  let articleIDs = await queryDB('SELECT articles FROM categories WHERE title = $1', [convertFromPath(category)]),\n      articles = await queryDB('SELECT * FROM articles WHERE id = ANY($1)', [articleIDs[0].articles]);\n  return {\n    props: JSON.parse(JSON.stringify({\n      heading: convertFromPath(category),\n      articles,\n      categories: await getCategories()\n    }))\n  };\n}\nexport default (({\n  heading,\n  articles,\n  categories\n}) => __jsx(Layout, {\n  categories: categories,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 55\n  }\n}, \" \", __jsx(ArticleDisplay, {\n  type: \"category\",\n  heading: heading,\n  articles: articles,\n  page: 1,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 88\n  }\n}), \" \"));","map":{"version":3,"sources":["C:/Users/nicho/Code/Portfolio/mock_nexus/pages/categories/[category].js"],"names":["queryDB","getCategories","ArticleDisplay","Layout","convertToPath","convertFromPath","getStaticPaths","categories","paths","map","title","params","category","fallback","getStaticProps","articleIDs","articles","props","JSON","parse","stringify","heading"],"mappings":";;;AAAA,SAASA,OAAT,EAAkBC,aAAlB,QAAuC,UAAvC;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,SAASC,aAAT,EAAwBC,eAAxB,QAA+C,iBAA/C;AAEA,OAAO,eAAeC,cAAf,GAAgC;AACnC,MAAIC,UAAU,GAAG,MAAMP,OAAO,CAAC,mEAAD,CAA9B;AAAA,MACIQ,KAAK,GAAGD,UAAU,CAACE,GAAX,CAAe,CAAC;AAACC,IAAAA;AAAD,GAAD,MAAc;AAAEC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,QAAQ,EAAER,aAAa,CAACM,KAAD;AAAzB;AAAV,GAAd,CAAf,CADZ;AAGA,SAAO;AAAEF,IAAAA,KAAF;AAASK,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACH;AAED,OAAO,eAAeC,cAAf,CAA8B;AAAEH,EAAAA,MAAM,EAAE;AAAEC,IAAAA;AAAF;AAAV,CAA9B,EAAwD;AAC3D,MAAIG,UAAU,GAAG,MAAMf,OAAO,CAAC,kDAAD,EAAqD,CAACK,eAAe,CAACO,QAAD,CAAhB,CAArD,CAA9B;AAAA,MACII,QAAQ,GAAG,MAAMhB,OAAO,CAAC,2CAAD,EAA8C,CAACe,UAAU,CAAC,CAAD,CAAV,CAAcC,QAAf,CAA9C,CAD5B;AAGA,SAAO;AACHC,IAAAA,KAAK,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe;AAC7BC,MAAAA,OAAO,EAAEhB,eAAe,CAACO,QAAD,CADK;AAE7BI,MAAAA,QAF6B;AAG7BT,MAAAA,UAAU,EAAE,MAAMN,aAAa;AAHF,KAAf,CAAX;AADJ,GAAP;AAOH;AAED,gBAAe,CAAC;AAAEoB,EAAAA,OAAF;AAAWL,EAAAA,QAAX;AAAqBT,EAAAA;AAArB,CAAD,KAAuC,MAAC,MAAD;AAAQ,EAAA,UAAU,EAAEA,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAiC,MAAC,cAAD;AAAgB,EAAA,IAAI,EAAC,UAArB;AAAgC,EAAA,OAAO,EAAEc,OAAzC;AAAkD,EAAA,QAAQ,EAAEL,QAA5D;AAAsE,EAAA,IAAI,EAAE,CAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAjC,MAAtD","sourcesContent":["import { queryDB, getCategories } from '../../db';\r\nimport ArticleDisplay from '../../components/ArticleDisplay';\r\nimport Layout from '../../layouts';\r\nimport { convertToPath, convertFromPath } from '../../Functions';\r\n\r\nexport async function getStaticPaths() {\r\n    let categories = await queryDB(\"SELECT title, articles FROM categories WHERE title <> 'Labyrinth'\"),\r\n        paths = categories.map(({title}) => ({ params: { category: convertToPath(title) } }));\r\n\r\n    return { paths, fallback: false }\r\n}\r\n\r\nexport async function getStaticProps({ params: { category } }) {\r\n    let articleIDs = await queryDB('SELECT articles FROM categories WHERE title = $1', [convertFromPath(category)]),\r\n        articles = await queryDB('SELECT * FROM articles WHERE id = ANY($1)', [articleIDs[0].articles]);\r\n\r\n    return {\r\n        props: JSON.parse(JSON.stringify({\r\n            heading: convertFromPath(category),\r\n            articles,\r\n            categories: await getCategories(),\r\n        }))\r\n    }\r\n}\r\n\r\nexport default ({ heading, articles, categories }) => <Layout categories={categories}> <ArticleDisplay type=\"category\" heading={heading} articles={articles} page={1} /> </Layout>"]},"metadata":{},"sourceType":"module"}