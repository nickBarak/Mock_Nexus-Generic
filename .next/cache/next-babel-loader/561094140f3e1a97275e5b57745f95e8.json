{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nexport function convertDate(date) {\n  var now = new Date(),\n      secondsPast = (now.getTime() - date) / 1000;\n\n  if (secondsPast < 60) {\n    return parseInt(secondsPast) + \" second\".concat(parseInt(secondsPast) > 1 ? 's' : '', \" ago\");\n  }\n\n  if (secondsPast < 3600) {\n    return parseInt(secondsPast / 60) + \" minute\".concat(parseInt(secondsPast / 60) > 1 ? 's' : '', \" ago\");\n  }\n\n  if (secondsPast <= 86400) {\n    return parseInt(secondsPast / 3600) + \" hour\".concat(parseInt(secondsPast / 3600) > 1 ? 's' : '', \" ago\");\n  }\n\n  return new Date(date).toLocaleDateString('default', {\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric'\n  });\n}\nexport function convertToPath(string) {\n  return string.toLowerCase().replace(/ /g, '-').replace(/[:'!@#$%^&*\\(\\)\";{}\\[\\]\\|~`<>\\/\\\\?\\.,]/g, '');\n}\nexport function convertFromPath(path) {\n  return path.split('-').map(function (word, i) {\n    return i === 0 || !['the', 'on'].includes(word) ? word[0].toUpperCase() + word.slice(1) : word;\n  }).join(' ');\n}\nexport function testEmail(email) {\n  return /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/.test(email);\n}\nexport function postComment(setMessage) {\n  /*#__PURE__*/\n  (function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var _map, _map2, content, name, email, response, status, msg;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.persist();\n              e.preventDefault();\n              _map = [0, 1, 2].map(function (i) {\n                return e.target.children[i].children[1].value;\n              }), _map2 = _slicedToArray(_map, 3), content = _map2[0], name = _map2[1], email = _map2[2];\n\n              if (!(!content || !name || !email)) {\n                _context.next = 5;\n                break;\n              }\n\n              return _context.abrupt(\"return\", setCommentMessage('There is an empty field'));\n\n            case 5:\n              _context.next = 7;\n              return fetch('../api/post-comment', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  article_id: articleID,\n                  name: name,\n                  email: email,\n                  content: content,\n                  parent: null,\n                  post_date: Date.now()\n                })\n              });\n\n            case 7:\n              response = _context.sent;\n              _context.next = 10;\n              return response.json();\n\n            case 10:\n              status = _context.sent;\n              _context.t0 = status;\n              _context.next = _context.t0 === 0 ? 14 : _context.t0 === 1 ? 16 : _context.t0 === 2 ? 18 : _context.t0 === 3 ? 20 : 22;\n              break;\n\n            case 14:\n              setMessage('');\n              return _context.abrupt(\"break\", 23);\n\n            case 16:\n              msg = 'Invalid email address';\n              return _context.abrupt(\"break\", 23);\n\n            case 18:\n              msg = 'This email is registered with a different name';\n              return _context.abrupt(\"break\", 23);\n\n            case 20:\n              msg = 'New user created';\n              return _context.abrupt(\"break\", 23);\n\n            case 22:\n              console.log(status);\n\n            case 23:\n              msg && setMessage(msg);\n              (!status || status === 3) && !sessionStorage.getItem('email') || sessionStorage.setItem('email', email) || sessionStorage.setItem('name', name);\n              e.target.reset();\n\n            case 26:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  })();\n}","map":{"version":3,"sources":["C:/Users/nicho/Code/Portfolio/mock_nexus/Functions.js"],"names":["convertDate","date","now","Date","secondsPast","getTime","parseInt","toLocaleDateString","day","month","year","convertToPath","string","toLowerCase","replace","convertFromPath","path","split","map","word","i","includes","toUpperCase","slice","join","testEmail","email","test","postComment","setMessage","e","persist","preventDefault","target","children","value","content","name","setCommentMessage","fetch","method","headers","body","JSON","stringify","article_id","articleID","parent","post_date","response","json","status","msg","console","log","sessionStorage","getItem","setItem","reset"],"mappings":"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","sourcesContent":["export function convertDate(date) {\r\n    let now = new Date(),\r\n        secondsPast = (now.getTime() - date) / 1000;\r\n    if (secondsPast < 60) {\r\n        return parseInt(secondsPast) + ` second${parseInt(secondsPast) > 1 ? 's' : ''} ago`;\r\n    }\r\n    if (secondsPast < 3600) {\r\n        return parseInt(secondsPast / 60) + ` minute${parseInt(secondsPast / 60) > 1 ? 's' : ''} ago`;\r\n    }\r\n    if (secondsPast <= 86400) {\r\n        return parseInt(secondsPast / 3600) + ` hour${parseInt(secondsPast / 3600) > 1 ? 's' : ''} ago`;\r\n    }\r\n    return new Date(date).toLocaleDateString('default', { day: 'numeric', month: 'long', year: 'numeric' })\r\n}\r\n\r\nexport function convertToPath(string) {\r\n    return string.toLowerCase().replace(/ /g, '-').replace(/[:'!@#$%^&*\\(\\)\";{}\\[\\]\\|~`<>\\/\\\\?\\.,]/g, '')\r\n}\r\n\r\nexport function convertFromPath(path) {\r\n    return path.split('-').map((word, i) => (i === 0 || !['the', 'on'].includes(word)) ? word[0].toUpperCase() + word.slice(1) : word).join(' ')\r\n}\r\n\r\nexport function testEmail(email) {\r\n    return /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/.test(email)\r\n}\r\n\r\nexport function postComment(setMessage) {\r\n    async e => {\r\n        e.persist();\r\n        e.preventDefault();\r\n        const [content, name, email] = [0, 1, 2].map(i => e.target.children[i].children[1].value);\r\n        if (!content || !name || !email) { return setCommentMessage('There is an empty field') }\r\n        let response = await fetch('../api/post-comment', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                article_id: articleID,\r\n                name,\r\n                email,\r\n                content,\r\n                parent: null,\r\n                post_date: Date.now()\r\n            })\r\n        });\r\n\r\n        let status = await response.json(),\r\n            msg;\r\n        switch (status) {\r\n            case 0:\r\n                setMessage('');\r\n                break;\r\n            case 1:\r\n                msg = 'Invalid email address';\r\n                break;\r\n            case 2:\r\n                msg = 'This email is registered with a different name';\r\n                break;\r\n            case 3:\r\n                msg = 'New user created';\r\n                break;\r\n            default:\r\n                console.log(status);\r\n        }\r\n        msg && setMessage(msg);\r\n        (!status || status === 3)\r\n            && !sessionStorage.getItem('email')\r\n            || sessionStorage.setItem('email', email)\r\n            || sessionStorage.setItem('name', name);\r\n        e.target.reset();\r\n}\r\n}"]},"metadata":{},"sourceType":"module"}