{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { config } from 'dotenv';\nimport { Client } from 'pg';\nconfig();\n\nif (!client) {\n  var client = new Client({\n    connectionString: process.env.DATABASE_URL\n  });\n  client ? console.log('Connected to PostgreSQL') : console.log('Failed to connect to database');\n}\n\nexport function queryDB(_x) {\n  return _queryDB.apply(this, arguments);\n}\n\nfunction _queryDB() {\n  _queryDB = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query) {\n    var params,\n        _yield$client$query,\n        rows,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            params = _args.length > 1 && _args[1] !== undefined ? _args[1] : [];\n            _context.prev = 1;\n            _context.next = 4;\n            return client.connect();\n\n          case 4:\n            _context.next = 6;\n            return client.query(query, params);\n\n          case 6:\n            _yield$client$query = _context.sent;\n            rows = _yield$client$query.rows;\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](1);\n            console.log(_context.t0);\n\n          case 13:\n            _context.prev = 13;\n            client.end();\n            return _context.finish(13);\n\n          case 16:\n            return _context.abrupt(\"return\", rows);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 10, 13, 16]]);\n  }));\n  return _queryDB.apply(this, arguments);\n}","map":{"version":3,"sources":["C:/Users/nicho/code/portfolio/mock_nexus/db.js"],"names":["config","Client","client","connectionString","process","env","DATABASE_URL","console","log","queryDB","query","params","connect","rows","end"],"mappings":";;AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,MAAT,QAAuB,IAAvB;AACAD,MAAM;;AAEN,IAAI,CAACE,MAAL,EAAa;AACT,MAAIA,MAAM,GAAG,IAAID,MAAJ,CAAW;AAAEE,IAAAA,gBAAgB,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAAhC,GAAX,CAAb;AACAJ,EAAAA,MAAM,GACAK,OAAO,CAACC,GAAR,CAAY,yBAAZ,CADA,GAEAD,OAAO,CAACC,GAAR,CAAY,+BAAZ,CAFN;AAGH;;AAED,gBAAsBC,OAAtB;AAAA;AAAA;;;sEAAO,iBAAuBC,KAAvB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAA8BC,YAAAA,MAA9B,2DAAqC,EAArC;AAAA;AAAA;AAAA,mBAEOT,MAAM,CAACU,OAAP,EAFP;;AAAA;AAAA;AAAA,mBAGsBV,MAAM,CAACQ,KAAP,CAAaA,KAAb,EAAoBC,MAApB,CAHtB;;AAAA;AAAA;AAGOE,YAAAA,IAHP,uBAGOA,IAHP;AAAA;AAAA;;AAAA;AAAA;AAAA;AAIWN,YAAAA,OAAO,CAACC,GAAR;;AAJX;AAAA;AAKON,YAAAA,MAAM,CAACY,GAAP;AALP;;AAAA;AAAA,6CAMID,IANJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { config } from 'dotenv';\r\nimport { Client } from 'pg';\r\nconfig();\r\n\r\nif (!client) {\r\n    var client = new Client({ connectionString: process.env.DATABASE_URL });\r\n    client\r\n        ? console.log('Connected to PostgreSQL')\r\n        : console.log('Failed to connect to database');\r\n}\r\n\r\nexport async function queryDB(query, params=[]) {\r\n    try {\r\n        await client.connect();\r\n        var { rows } = await client.query(query, params);\r\n    } catch (e) { console.log(e) }\r\n    finally { client.end() }\r\n    return rows;\r\n}"]},"metadata":{},"sourceType":"module"}