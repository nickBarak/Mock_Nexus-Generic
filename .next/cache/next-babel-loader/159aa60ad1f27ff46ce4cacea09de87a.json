{"ast":null,"code":"export function convertDate(date) {\n  return new Date(date).toLocaleDateString('default', {\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric'\n  });\n}\nexport function convertToPath(string) {\n  return string.toLowerCase().replace(/ /g, '-').replace(/:'\"/g, '');\n}\nexport function convertFromPath(path) {\n  return path.map(function (param) {\n    return param.split('-').map(function (word, i) {\n      return i === 0 || !['the', 'on'].includes(word) ? word[0].toUpperCase() + word.slice(1) : word;\n    }).join(' ');\n  });\n}","map":{"version":3,"sources":["C:/Users/nicho/code/portfolio/mock_nexus/Functions.js"],"names":["convertDate","date","Date","toLocaleDateString","day","month","year","convertToPath","string","toLowerCase","replace","convertFromPath","path","map","param","split","word","i","includes","toUpperCase","slice","join"],"mappings":"AAAA,OAAO,SAASA,WAAT,CAAqBC,IAArB,EAA2B;AAC9B,SAAO,IAAIC,IAAJ,CAASD,IAAT,EAAeE,kBAAf,CAAkC,SAAlC,EAA6C;AAAEC,IAAAA,GAAG,EAAE,SAAP;AAAkBC,IAAAA,KAAK,EAAE,MAAzB;AAAiCC,IAAAA,IAAI,EAAE;AAAvC,GAA7C,CAAP;AACH;AAED,OAAO,SAASC,aAAT,CAAuBC,MAAvB,EAA+B;AAClC,SAAOA,MAAM,CAACC,WAAP,GAAqBC,OAArB,CAA6B,IAA7B,EAAmC,GAAnC,EAAwCA,OAAxC,CAAgD,MAAhD,EAAwD,EAAxD,CAAP;AACH;AAED,OAAO,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;AAClC,SAAOA,IAAI,CAACC,GAAL,CAAS,UAAAC,KAAK;AAAA,WAAIA,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBF,GAAjB,CAAqB,UAACG,IAAD,EAAOC,CAAP;AAAA,aAAcA,CAAC,KAAK,CAAN,IAAW,CAAC,CAAC,KAAD,EAAQ,IAAR,EAAcC,QAAd,CAAuBF,IAAvB,CAAb,GAA6CA,IAAI,CAAC,CAAD,CAAJ,CAAQG,WAAR,KAAwBH,IAAI,CAACI,KAAL,CAAW,CAAX,CAArE,GAAqFJ,IAAlG;AAAA,KAArB,EAA6HK,IAA7H,CAAkI,GAAlI,CAAJ;AAAA,GAAd,CAAP;AACH","sourcesContent":["export function convertDate(date) {\r\n    return new Date(date).toLocaleDateString('default', { day: 'numeric', month: 'long', year: 'numeric' })\r\n}\r\n\r\nexport function convertToPath(string) {\r\n    return string.toLowerCase().replace(/ /g, '-').replace(/:'\"/g, '');\r\n}\r\n\r\nexport function convertFromPath(path) {\r\n    return path.map(param => param.split('-').map((word, i) => (i === 0 || !['the', 'on'].includes(word)) ? word[0].toUpperCase() + word.slice(1) : word).join(' '));\r\n}"]},"metadata":{},"sourceType":"module"}