{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { config } from 'dotenv';\nimport { Pool } from 'pg';\nconfig();\nconst pools = [];\n\nwhile (pools.length < 10) {\n  pools.push(new Pool({\n    connectionString: process.env.DATABASE_URL,\n    idleTimeoutMillis: 0\n  }));\n}\n\npools.length === 10 ? console.log('Connected to PostgreSQL') : console.log('Failed to connect to database');\nexport async function queryDB(query, params = []) {\n  try {\n    var client = await pool.connect(),\n        {\n      rows\n    } = await client.query(query, params);\n  } catch (e) {\n    console.log(e);\n  } finally {\n    client.release();\n  }\n\n  return rows;\n}\nexport async function getCategories() {\n  let categories = await queryDB(\"SELECT * FROM categories WHERE title <> 'Headlines' AND title <> 'Labyrinth' ORDER BY title\");\n\n  for (let category of categories) {\n    for (let id of category.articles) {\n      let hydratedArticle = await queryDB(\"SELECT * FROM articles WHERE id = $1\", [id]);\n      category.articles.splice(category.articles.indexOf(id), 1, hydratedArticle[0]);\n    }\n  }\n\n  return categories.map(category => _objectSpread(_objectSpread({}, category), {}, {\n    articles: category.articles.sort(({\n      publish_date: a\n    }, {\n      publish_date: b\n    }) => b - a)\n  }));\n}\nexport async function insertUser(name, email) {\n  await queryDB('INSERT INTO users (name, email, comments, following) VALUES ($1, $2, $3, $4)', [name, email, [], []]);\n}\nexport async function getUser(email) {\n  let [user] = await queryDB('SELECT * FROM users WHERE email = $1', [email]);\n  return user;\n}\nexport default pool;","map":{"version":3,"sources":["C:/Users/nicho/Code/Portfolio/mock_nexus/db.js"],"names":["config","Pool","pools","length","push","connectionString","process","env","DATABASE_URL","idleTimeoutMillis","console","log","queryDB","query","params","client","pool","connect","rows","e","release","getCategories","categories","category","id","articles","hydratedArticle","splice","indexOf","map","sort","publish_date","a","b","insertUser","name","email","getUser","user"],"mappings":";;;;;;AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,IAAT,QAAqB,IAArB;AACAD,MAAM;AAEN,MAAME,KAAK,GAAG,EAAd;;AACA,OAAOA,KAAK,CAACC,MAAN,GAAe,EAAtB,EAA0B;AACtBD,EAAAA,KAAK,CAACE,IAAN,CAAW,IAAIH,IAAJ,CAAS;AAChBI,IAAAA,gBAAgB,EAAEC,OAAO,CAACC,GAAR,CAAYC,YADd;AAEhBC,IAAAA,iBAAiB,EAAE;AAFH,GAAT,CAAX;AAIH;;AACDP,KAAK,CAACC,MAAN,KAAiB,EAAjB,GACMO,OAAO,CAACC,GAAR,CAAY,yBAAZ,CADN,GAEMD,OAAO,CAACC,GAAR,CAAY,+BAAZ,CAFN;AAIA,OAAO,eAAeC,OAAf,CAAuBC,KAAvB,EAA8BC,MAAM,GAAC,EAArC,EAAyC;AAC5C,MAAI;AACA,QAAIC,MAAM,GAAG,MAAMC,IAAI,CAACC,OAAL,EAAnB;AAAA,QACI;AAAEC,MAAAA;AAAF,QAAW,MAAMH,MAAM,CAACF,KAAP,CAAaA,KAAb,EAAoBC,MAApB,CADrB;AAEH,GAHD,CAGE,OAAOK,CAAP,EAAU;AAAET,IAAAA,OAAO,CAACC,GAAR,CAAYQ,CAAZ;AAAgB,GAH9B,SAIQ;AAAEJ,IAAAA,MAAM,CAACK,OAAP;AAAkB;;AAC5B,SAAOF,IAAP;AACH;AAED,OAAO,eAAeG,aAAf,GAA+B;AAClC,MAAIC,UAAU,GAAG,MAAMV,OAAO,CAAC,6FAAD,CAA9B;;AAEA,OAAK,IAAIW,QAAT,IAAqBD,UAArB,EAAiC;AAC7B,SAAK,IAAIE,EAAT,IAAeD,QAAQ,CAACE,QAAxB,EAAkC;AAC9B,UAAIC,eAAe,GAAG,MAAMd,OAAO,CAAC,sCAAD,EAAyC,CAACY,EAAD,CAAzC,CAAnC;AACAD,MAAAA,QAAQ,CAACE,QAAT,CAAkBE,MAAlB,CAAyBJ,QAAQ,CAACE,QAAT,CAAkBG,OAAlB,CAA0BJ,EAA1B,CAAzB,EAAwD,CAAxD,EAA2DE,eAAe,CAAC,CAAD,CAA1E;AACH;AACJ;;AAED,SAAOJ,UAAU,CAACO,GAAX,CAAeN,QAAQ,oCAAUA,QAAV;AAAoBE,IAAAA,QAAQ,EAAEF,QAAQ,CAACE,QAAT,CAAkBK,IAAlB,CAAuB,CAAC;AAACC,MAAAA,YAAY,EAAEC;AAAf,KAAD,EAAoB;AAACD,MAAAA,YAAY,EAAEE;AAAf,KAApB,KAA0CA,CAAC,GAACD,CAAnE;AAA9B,IAAvB,CAAP;AACH;AAED,OAAO,eAAeE,UAAf,CAA0BC,IAA1B,EAAgCC,KAAhC,EAAuC;AAC1C,QAAMxB,OAAO,CAAC,8EAAD,EAAiF,CAACuB,IAAD,EAAOC,KAAP,EAAc,EAAd,EAAkB,EAAlB,CAAjF,CAAb;AACH;AAED,OAAO,eAAeC,OAAf,CAAuBD,KAAvB,EAA8B;AAClC,MAAI,CAACE,IAAD,IAAS,MAAM1B,OAAO,CAAC,sCAAD,EAAyC,CAACwB,KAAD,CAAzC,CAA1B;AACC,SAAOE,IAAP;AACH;AAED,eAAetB,IAAf","sourcesContent":["import { config } from 'dotenv';\r\nimport { Pool } from 'pg';\r\nconfig();\r\n\r\nconst pools = [];\r\nwhile (pools.length < 10) {\r\n    pools.push(new Pool({\r\n        connectionString: process.env.DATABASE_URL,\r\n        idleTimeoutMillis: 0\r\n    }));\r\n}\r\npools.length === 10\r\n    ? console.log('Connected to PostgreSQL')\r\n    : console.log('Failed to connect to database');\r\n\r\nexport async function queryDB(query, params=[]) {\r\n    try {\r\n        var client = await pool.connect(),\r\n            { rows } = await client.query(query, params);\r\n    } catch (e) { console.log(e) }\r\n    finally { client.release() }\r\n    return rows;\r\n}\r\n\r\nexport async function getCategories() {\r\n    let categories = await queryDB(\"SELECT * FROM categories WHERE title <> 'Headlines' AND title <> 'Labyrinth' ORDER BY title\");\r\n\r\n    for (let category of categories) {\r\n        for (let id of category.articles) {\r\n            let hydratedArticle = await queryDB(\"SELECT * FROM articles WHERE id = $1\", [id]);\r\n            category.articles.splice(category.articles.indexOf(id), 1, hydratedArticle[0]);\r\n        }\r\n    }\r\n\r\n    return categories.map(category => ({ ...category, articles: category.articles.sort(({publish_date: a}, {publish_date: b}) => b-a) }));\r\n}\r\n\r\nexport async function insertUser(name, email) {\r\n    await queryDB('INSERT INTO users (name, email, comments, following) VALUES ($1, $2, $3, $4)', [name, email, [], []]);\r\n}\r\n\r\nexport async function getUser(email) {\r\n   let [user] = await queryDB('SELECT * FROM users WHERE email = $1', [email]);\r\n    return user;\r\n}\r\n\r\nexport default pool"]},"metadata":{},"sourceType":"module"}