{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport 'isomorphic-unfetch';\nimport { useState, useEffect } from 'react';\nimport { Simulate } from 'react-dom/test-utils';\n\nfunction CommentInputs({\n  following,\n  articleID,\n  setMessage,\n  parent,\n  embedded,\n  firstComment,\n  mainInput\n}) {\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n  useEffect(_ => {\n    sessionStorage.getItem('email') && setUser({\n      name: sessionStorage.getItem('name'),\n      email: sessionStorage.getItem('email')\n    });\n    console.log(user);\n  }, []);\n\n  async function postComment(e, setMessage, article_id, parent = null) {\n    e.persist();\n    e.preventDefault();\n    const [content, name, email] = [0, 1, 2].map(i => e.target.children[i].children[1].value);\n\n    if (!content || !name || !email) {\n      return setMessage('There is an empty field');\n    }\n\n    let response = await fetch('http://localhost:3000/api/post-comment', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        article_id,\n        name,\n        email,\n        content,\n        parent,\n        post_date: Date.now()\n      })\n    });\n    let status = await response.json(),\n        msg;\n\n    switch (status) {\n      case 0:\n        setMessage('');\n        break;\n\n      case 1:\n        msg = 'Invalid email address';\n        break;\n\n      case 2:\n        msg = 'This email is registered with a different name';\n        break;\n\n      case 3:\n        msg = 'New user created';\n        break;\n\n      default:\n        console.log(status);\n    }\n\n    msg && setMessage(msg);\n\n    if (!status || status === 3) {\n      sessionStorage.setItem('email', email);\n      sessionStorage.setItem('name', name);\n    }\n\n    e.target.reset();\n    document.location.reload();\n  }\n\n  return __jsx(React.Fragment, null, __jsx(\"form\", {\n    style: {\n      position: 'relative',\n      marginBottom: '2.35rem',\n      marginTop: '1rem',\n      maxWidth: '55rem'\n    },\n    onSubmit: e => postComment(e, setMessage, articleID, parent),\n    className: _JSXStyle.dynamic([[\"2975795631\", [embedded ? '1rem' : '1.15rem', user ? 'visibility: hidden;' : '']]])\n  }, __jsx(\"div\", {\n    style: {\n      position: 'relative'\n    },\n    className: _JSXStyle.dynamic([[\"2975795631\", [embedded ? '1rem' : '1.15rem', user ? 'visibility: hidden;' : '']]])\n  }, __jsx(\"img\", {\n    src: \"https://secure.gravatar.com/avatar/?s=40&d=mm&r=g\",\n    alt: \"user\",\n    className: _JSXStyle.dynamic([[\"2975795631\", [embedded ? '1rem' : '1.15rem', user ? 'visibility: hidden;' : '']]]) + \" \" + \"input-large-img\"\n  }), __jsx(\"input\", {\n    type: \"text\",\n    placeholder: `${firstComment ? 'Start' : 'Join'} the discussion...`,\n    className: _JSXStyle.dynamic([[\"2975795631\", [embedded ? '1rem' : '1.15rem', user ? 'visibility: hidden;' : '']]])\n  })), __jsx(\"div\", {\n    style: {\n      position: 'relative',\n      display: user ? 'none' : 'block'\n    },\n    className: _JSXStyle.dynamic([[\"2975795631\", [embedded ? '1rem' : '1.15rem', user ? 'visibility: hidden;' : '']]])\n  }, __jsx(\"i\", {\n    className: _JSXStyle.dynamic([[\"2975795631\", [embedded ? '1rem' : '1.15rem', user ? 'visibility: hidden;' : '']]]) + \" \" + \"fas fa-user input-icon\"\n  }), __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"Name*\",\n    className: _JSXStyle.dynamic([[\"2975795631\", [embedded ? '1rem' : '1.15rem', user ? 'visibility: hidden;' : '']]]) + \" \" + \"input-small\"\n  })), __jsx(\"div\", {\n    style: {\n      position: 'relative',\n      display: 'flex',\n      justifyContent: 'space-between'\n    },\n    className: _JSXStyle.dynamic([[\"2975795631\", [embedded ? '1rem' : '1.15rem', user ? 'visibility: hidden;' : '']]])\n  }, __jsx(\"i\", {\n    className: _JSXStyle.dynamic([[\"2975795631\", [embedded ? '1rem' : '1.15rem', user ? 'visibility: hidden;' : '']]]) + \" \" + \"fas fa-at input-icon\"\n  }), __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"Email*\",\n    className: _JSXStyle.dynamic([[\"2975795631\", [embedded ? '1rem' : '1.15rem', user ? 'visibility: hidden;' : '']]]) + \" \" + \"input-small\"\n  }), __jsx(\"span\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center'\n    },\n    className: _JSXStyle.dynamic([[\"2975795631\", [embedded ? '1rem' : '1.15rem', user ? 'visibility: hidden;' : '']]])\n  }, mainInput && __jsx(\"span\", {\n    tabIndex: 0,\n    onFocus: e => {\n      e.target.style.border = '1px solid black';\n    },\n    onBlur: e => {\n      e.target.style.border = 'none';\n    },\n    onKeyDown: e => e.keyCode === 13 && Simulate.click(e.target),\n    onClick: async e => {\n      e.persist();\n      e.preventDefault();\n      const form = e.currentTarget.parentElement.parentElement.parentElement;\n      let email = user ? user.email : e.currentTarget.parentElement.parentElement.children[1].value,\n          name = user ? user.name : e.currentTarget.parentElement.parentElement.parentElement.children[1].children[1].value;\n\n      if (email && name) {\n        let response = await fetch('http://localhost:3000/api/follow-article', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            name,\n            email,\n            articleID,\n            following\n          })\n        }),\n            status = await response.json(),\n            msg;\n        console.log(status);\n\n        switch (status) {\n          default:\n            console.log(status);\n            msg = 'Error Following Article';\n            break;\n\n          case 0:\n            setMessage('');\n            break;\n\n          case 1:\n            msg = 'Invalid email address';\n            break;\n\n          case 2:\n            msg = 'This email is registered with a different name';\n            break;\n\n          case 3:\n            msg = 'New user created';\n        }\n\n        msg && setMessage(msg);\n\n        if (!status || status === 3) {\n          if (!sessionStorage.getItem('email')) {\n            sessionStorage.setItem('email', email);\n            sessionStorage.setItem('name', name);\n          }\n\n          alert(`Imagine your email being ${following ? 'unsubscribed from' : 'subscribed to'} this article\\'s comment activity`);\n          form.reset();\n          document.location.reload();\n        }\n      } else alert('Enter your name and email in the boxes to the left to follow this article');\n    },\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      textAlign: 'center'\n    },\n    className: _JSXStyle.dynamic([[\"2975795631\", [embedded ? '1rem' : '1.15rem', user ? 'visibility: hidden;' : '']]])\n  }, __jsx(\"i\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      backgroundColor: '#eee',\n      width: '2rem',\n      height: '2rem',\n      color: '#999',\n      marginRight: '.85rem',\n      border: '1px solid #ddd',\n      cursor: 'pointer'\n    },\n    className: _JSXStyle.dynamic([[\"2975795631\", [embedded ? '1rem' : '1.15rem', user ? 'visibility: hidden;' : '']]]) + \" \" + `fas ${following ? \"fa-bell-slash\" : \"fa-bell\"}`\n  })), __jsx(\"button\", {\n    className: _JSXStyle.dynamic([[\"2975795631\", [embedded ? '1rem' : '1.15rem', user ? 'visibility: hidden;' : '']]]) + \" \" + \"post-comment-button\"\n  }, \"Post Comment\"))), __jsx(_JSXStyle, {\n    id: \"2975795631\",\n    dynamic: [embedded ? '1rem' : '1.15rem', user ? 'visibility: hidden;' : '']\n  }, [\".post-comment-button.__jsx-style-dynamic-selector{background-color:#555;color:white;font-size:.925rem;padding:.5rem 1.25rem;cursor:pointer;border:none;}\", \".post-comment-button.__jsx-style-dynamic-selector:hover,.post-comment-button.__jsx-style-dynamic-selector:focus{background-color:#404040;}\", `input.__jsx-style-dynamic-selector{padding:1.7rem;padding-left:5rem;border:1px solid #ddd;color:#888;font-family:monospace;width:100%;margin-bottom:.6rem;font-size:${embedded ? '1rem' : '1.15rem'};}`, \".input-large-img.__jsx-style-dynamic-selector{position:absolute;top:1rem;left:1rem;box-shadow:0 0 4px 2px #d8d8d8;}\", \".input-small.__jsx-style-dynamic-selector{font-size:.9rem;padding:.5rem 1.9rem;width:50%;font-family:Lato;}\", `.input-small.__jsx-style-dynamic-selector:nth-child(2),.input-icon.__jsx-style-dynamic-selector{${user ? 'visibility: hidden;' : ''};}`, \".input-icon.__jsx-style-dynamic-selector{color:#aaa;position:absolute;top:.65rem;left:.5rem;}\"])));\n}\n\nexport default CommentInputs;","map":null,"metadata":{},"sourceType":"module"}