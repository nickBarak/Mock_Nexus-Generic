{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nicho\\\\Code\\\\Portfolio\\\\mock_nexus\\\\pages\\\\categories\\\\[category]\\\\page\\\\[page].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { queryDB, getCategories } from '../../../../db';\nimport ArticleDisplay from '../../../../components/ArticleDisplay';\nimport Layout from '../../../../layouts';\nimport { convertToPath, convertFromPath } from '../../../../Functions';\nexport async function getStaticPaths() {\n  let categories = await queryDB(\"SELECT title, articles FROM categories WHERE title <> 'Labyrinth'\"),\n      paths = categories.map(({\n    title,\n    articles\n  }) => articles.map((article, i) => ({\n    params: {\n      category: convertToPath(title),\n      page: i + 1\n    }\n  })));\n  paths = paths.reduce((acc, cur) => [...cur, ...acc], []);\n  console.log(paths);\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps({\n  params: {\n    category,\n    page\n  }\n}) {\n  let articleIDs = await queryDB('SELECT articles FROM categories WHERE title = $1', [convertFromPath(category)]),\n      articles = await queryDB('SELECT * FROM articles WHERE id = ANY($1)', [articleIDs[0].articles]);\n  return {\n    props: JSON.parse(JSON.stringify({\n      heading: convertFromPath(category),\n      articles,\n      categories: await getCategories(),\n      page\n    }))\n  };\n}\nexport default (({\n  heading,\n  articles,\n  categories,\n  page\n}) => __jsx(Layout, {\n  categories: categories,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 61\n  }\n}, \" \", __jsx(ArticleDisplay, {\n  type: \"category\",\n  heading: heading,\n  articles: articles,\n  page: page,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 94\n  }\n}), \" \"));","map":{"version":3,"sources":["C:/Users/nicho/Code/Portfolio/mock_nexus/pages/categories/[category]/page/[page].js"],"names":["queryDB","getCategories","ArticleDisplay","Layout","convertToPath","convertFromPath","getStaticPaths","categories","paths","map","title","articles","article","i","params","category","page","reduce","acc","cur","console","log","fallback","getStaticProps","articleIDs","props","JSON","parse","stringify","heading"],"mappings":";;;AAAA,SAASA,OAAT,EAAkBC,aAAlB,QAAuC,gBAAvC;AACA,OAAOC,cAAP,MAA2B,uCAA3B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAASC,aAAT,EAAwBC,eAAxB,QAA+C,uBAA/C;AAEA,OAAO,eAAeC,cAAf,GAAgC;AACnC,MAAIC,UAAU,GAAG,MAAMP,OAAO,CAAC,mEAAD,CAA9B;AAAA,MACIQ,KAAK,GAAGD,UAAU,CAACE,GAAX,CAAe,CAAC;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAD,KACnBA,QAAQ,CAACF,GAAT,CAAa,CAACG,OAAD,EAAUC,CAAV,MACR;AAAEC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,QAAQ,EAAEX,aAAa,CAACM,KAAD,CAAzB;AAAkCM,MAAAA,IAAI,EAAEH,CAAC,GAAC;AAA1C;AAAV,GADQ,CAAb,CADI,CADZ;AAMAL,EAAAA,KAAK,GAAGA,KAAK,CAACS,MAAN,CAAa,CAACC,GAAD,EAAMC,GAAN,KAAc,CAAC,GAAGA,GAAJ,EAAS,GAAGD,GAAZ,CAA3B,EAA6C,EAA7C,CAAR;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYb,KAAZ;AAEA,SAAO;AAAEA,IAAAA,KAAF;AAASc,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACH;AAED,OAAO,eAAeC,cAAf,CAA8B;AAAET,EAAAA,MAAM,EAAE;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ;AAAV,CAA9B,EAA8D;AACjE,MAAIQ,UAAU,GAAG,MAAMxB,OAAO,CAAC,kDAAD,EAAqD,CAACK,eAAe,CAACU,QAAD,CAAhB,CAArD,CAA9B;AAAA,MACIJ,QAAQ,GAAG,MAAMX,OAAO,CAAC,2CAAD,EAA8C,CAACwB,UAAU,CAAC,CAAD,CAAV,CAAcb,QAAf,CAA9C,CAD5B;AAGA,SAAO;AACHc,IAAAA,KAAK,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe;AAC7BC,MAAAA,OAAO,EAAExB,eAAe,CAACU,QAAD,CADK;AAE7BJ,MAAAA,QAF6B;AAG7BJ,MAAAA,UAAU,EAAE,MAAMN,aAAa,EAHF;AAI7Be,MAAAA;AAJ6B,KAAf,CAAX;AADJ,GAAP;AAQH;AAED,gBAAe,CAAC;AAAEa,EAAAA,OAAF;AAAWlB,EAAAA,QAAX;AAAqBJ,EAAAA,UAArB;AAAiCS,EAAAA;AAAjC,CAAD,KAA6C,MAAC,MAAD;AAAQ,EAAA,UAAU,EAAET,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAiC,MAAC,cAAD;AAAgB,EAAA,IAAI,EAAC,UAArB;AAAgC,EAAA,OAAO,EAAEsB,OAAzC;AAAkD,EAAA,QAAQ,EAAElB,QAA5D;AAAsE,EAAA,IAAI,EAAEK,IAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAjC,MAA5D","sourcesContent":["import { queryDB, getCategories } from '../../../../db';\r\nimport ArticleDisplay from '../../../../components/ArticleDisplay';\r\nimport Layout from '../../../../layouts';\r\nimport { convertToPath, convertFromPath } from '../../../../Functions';\r\n\r\nexport async function getStaticPaths() {\r\n    let categories = await queryDB(\"SELECT title, articles FROM categories WHERE title <> 'Labyrinth'\"),\r\n        paths = categories.map(({title, articles}) =>\r\n            articles.map((article, i) =>\r\n                ({ params: { category: convertToPath(title), page: i+1 } })\r\n            )\r\n        );\r\n    paths = paths.reduce((acc, cur) => [...cur, ...acc], []);\r\n    console.log(paths);\r\n\r\n    return { paths, fallback: false }\r\n}\r\n\r\nexport async function getStaticProps({ params: { category, page } }) {\r\n    let articleIDs = await queryDB('SELECT articles FROM categories WHERE title = $1', [convertFromPath(category)]),\r\n        articles = await queryDB('SELECT * FROM articles WHERE id = ANY($1)', [articleIDs[0].articles]);\r\n\r\n    return {\r\n        props: JSON.parse(JSON.stringify({\r\n            heading: convertFromPath(category),\r\n            articles,\r\n            categories: await getCategories(),\r\n            page\r\n        }))\r\n    }\r\n}\r\n\r\nexport default ({ heading, articles, categories, page }) => <Layout categories={categories}> <ArticleDisplay type=\"category\" heading={heading} articles={articles} page={page} /> </Layout>"]},"metadata":{},"sourceType":"module"}